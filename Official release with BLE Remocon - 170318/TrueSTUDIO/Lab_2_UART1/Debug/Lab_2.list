
Lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006540  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08006704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008b4  2000000c  08006710  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00008000  200008c0  08006710  000208c0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000a584  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000249a5  00000000  00000000  0002a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004001  00000000  00000000  0004ef65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000015a8  00000000  00000000  00052f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001428  00000000  00000000  00054510  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00007441  00000000  00000000  00055938  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0005cd79  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00005a9c  00000000  00000000  0005cdf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080066bc 	.word	0x080066bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080066bc 	.word	0x080066bc

080001d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80001d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800020c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80001da:	e003      	b.n	80001e4 <LoopCopyDataInit>

080001dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80001de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80001e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001e2:	3104      	adds	r1, #4

080001e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80001e4:	480b      	ldr	r0, [pc, #44]	; (8000214 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80001e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80001ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001ec:	d3f6      	bcc.n	80001dc <CopyDataInit>
  ldr  r2, =_sbss
 80001ee:	4a0b      	ldr	r2, [pc, #44]	; (800021c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80001f0:	e002      	b.n	80001f8 <LoopFillZerobss>

080001f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001f4:	f842 3b04 	str.w	r3, [r2], #4

080001f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80001fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001fc:	d3f9      	bcc.n	80001f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001fe:	f000 fe89 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000202:	f006 fa37 	bl	8006674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000206:	f000 f80f 	bl	8000228 <main>
  bx  lr    
 800020a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800020c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000210:	08006704 	.word	0x08006704
  ldr  r0, =_sdata
 8000214:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000218:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800021c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000220:	200008c0 	.word	0x200008c0

08000224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000224:	e7fe      	b.n	8000224 <ADC_IRQHandler>
	...

08000228 <main>:
uint8_t BufferToWrite[256];
int32_t BytesToWrite;

/* USER CODE END 0 */

int main(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0


	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 800022c:	f000 ff50 	bl	80010d0 <HAL_Init>

	  /* Configure the system clock */
	  SystemClock_Config();
 8000230:	f000 f916 	bl	8000460 <SystemClock_Config>

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8000234:	f000 fa4a 	bl	80006cc <MX_GPIO_Init>

	  MX_TIM2_Init();
 8000238:	f000 f97a 	bl	8000530 <MX_TIM2_Init>
	  MX_TIM4_Init();
 800023c:	f000 f9cc 	bl	80005d8 <MX_TIM4_Init>
	  MX_TIM9_Init();
 8000240:	f000 fa1e 	bl	8000680 <MX_TIM9_Init>
	  //MX_USART1_UART_Init();
	  UART1_init();
 8000244:	f000 f81e 	bl	8000284 <UART1_init>



	//  Initialize Onboard LED
	  BSP_LED_Init(LED1);
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fde9 	bl	8000e20 <BSP_LED_Init>
	  BSP_LED_Init(LED2);
 800024e:	2001      	movs	r0, #1
 8000250:	f000 fde6 	bl	8000e20 <BSP_LED_Init>
	  BSP_LED_Off(LED1);
 8000254:	2000      	movs	r0, #0
 8000256:	f000 fe43 	bl	8000ee0 <BSP_LED_Off>
	  BSP_LED_Off(LED2);
 800025a:	2001      	movs	r0, #1
 800025c:	f000 fe40 	bl	8000ee0 <BSP_LED_Off>
	  BSP_LED_On(LED1);
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fe23 	bl	8000eac <BSP_LED_On>
	  BSP_LED_On(LED2);
 8000266:	2001      	movs	r0, #1
 8000268:	f000 fe20 	bl	8000eac <BSP_LED_On>


	  /* Initialize General purpose TIM9 50Hz*/
	  HAL_TIM_Base_Start_IT(&htim9);
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <main+0x54>)
 800026e:	f003 f8eb 	bl	8003448 <HAL_TIM_Base_Start_IT>
	  /* USER CODE BEGIN WHILE */
	  while (1) {

		 /* USER CODE  */

	    myprint((uint8_t *)"Hello World\n");//print using USART
 8000272:	4803      	ldr	r0, [pc, #12]	; (8000280 <main+0x58>)
 8000274:	f000 f8c4 	bl	8000400 <myprint>
 8000278:	e7fb      	b.n	8000272 <main+0x4a>
 800027a:	bf00      	nop
 800027c:	200001cc 	.word	0x200001cc
 8000280:	080066d4 	.word	0x080066d4

08000284 <UART1_init>:

	}
}

void UART1_init()
 {
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800028a:	4a57      	ldr	r2, [pc, #348]	; (80003e8 <UART1_init+0x164>)
 800028c:	4b56      	ldr	r3, [pc, #344]	; (80003e8 <UART1_init+0x164>)
 800028e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000290:	f043 0310 	orr.w	r3, r3, #16
 8000294:	6453      	str	r3, [r2, #68]	; 0x44
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8000296:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800029a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a0:	2301      	movs	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80002a4:	2303      	movs	r3, #3
 80002a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80002a8:	2307      	movs	r3, #7
 80002aa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	4619      	mov	r1, r3
 80002b0:	484e      	ldr	r0, [pc, #312]	; (80003ec <UART1_init+0x168>)
 80002b2:	f001 f8b5 	bl	8001420 <HAL_GPIO_Init>



	 USART1->CR1 &=  ~USART_CR1_UE;
 80002b6:	4a4e      	ldr	r2, [pc, #312]	; (80003f0 <UART1_init+0x16c>)
 80002b8:	4b4d      	ldr	r3, [pc, #308]	; (80003f0 <UART1_init+0x16c>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002c0:	60d3      	str	r3, [r2, #12]
	 USART1->CR2 &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80002c2:	4a4b      	ldr	r2, [pc, #300]	; (80003f0 <UART1_init+0x16c>)
 80002c4:	4b4a      	ldr	r3, [pc, #296]	; (80003f0 <UART1_init+0x16c>)
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80002cc:	6113      	str	r3, [r2, #16]
	 USART1->CR2 |= (uint32_t) UART_STOPBITS_1;
 80002ce:	4a48      	ldr	r2, [pc, #288]	; (80003f0 <UART1_init+0x16c>)
 80002d0:	4b47      	ldr	r3, [pc, #284]	; (80003f0 <UART1_init+0x16c>)
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	6113      	str	r3, [r2, #16]
	 USART1->CR1 &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE |  USART_CR1_RE | USART_CR1_OVER8));
 80002d6:	4a46      	ldr	r2, [pc, #280]	; (80003f0 <UART1_init+0x16c>)
 80002d8:	4b45      	ldr	r3, [pc, #276]	; (80003f0 <UART1_init+0x16c>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80002e0:	f023 030c 	bic.w	r3, r3, #12
 80002e4:	60d3      	str	r3, [r2, #12]
	 USART1->CR1 |= (uint32_t)UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_MODE_TX_RX | UART_OVERSAMPLING_16;
 80002e6:	4a42      	ldr	r2, [pc, #264]	; (80003f0 <UART1_init+0x16c>)
 80002e8:	4b41      	ldr	r3, [pc, #260]	; (80003f0 <UART1_init+0x16c>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	f043 030c 	orr.w	r3, r3, #12
 80002f0:	60d3      	str	r3, [r2, #12]
	 USART1->CR3 &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80002f2:	4a3f      	ldr	r2, [pc, #252]	; (80003f0 <UART1_init+0x16c>)
 80002f4:	4b3e      	ldr	r3, [pc, #248]	; (80003f0 <UART1_init+0x16c>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80002fc:	6153      	str	r3, [r2, #20]
	 USART1->CR3 |=  UART_HWCONTROL_NONE;
 80002fe:	4a3c      	ldr	r2, [pc, #240]	; (80003f0 <UART1_init+0x16c>)
 8000300:	4b3b      	ldr	r3, [pc, #236]	; (80003f0 <UART1_init+0x16c>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	6153      	str	r3, [r2, #20]
	 USART1->BRR =  UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(),115200 );
 8000306:	4e3a      	ldr	r6, [pc, #232]	; (80003f0 <UART1_init+0x16c>)
 8000308:	f002 fd34 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 800030c:	4602      	mov	r2, r0
 800030e:	4613      	mov	r3, r2
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	4413      	add	r3, r2
 8000314:	009a      	lsls	r2, r3, #2
 8000316:	4413      	add	r3, r2
 8000318:	0b5b      	lsrs	r3, r3, #13
 800031a:	4a36      	ldr	r2, [pc, #216]	; (80003f4 <UART1_init+0x170>)
 800031c:	fba2 2303 	umull	r2, r3, r2, r3
 8000320:	011c      	lsls	r4, r3, #4
 8000322:	f002 fd27 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 8000326:	4602      	mov	r2, r0
 8000328:	4613      	mov	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	4413      	add	r3, r2
 800032e:	009a      	lsls	r2, r3, #2
 8000330:	4413      	add	r3, r2
 8000332:	4a31      	ldr	r2, [pc, #196]	; (80003f8 <UART1_init+0x174>)
 8000334:	fba2 2303 	umull	r2, r3, r2, r3
 8000338:	0c9d      	lsrs	r5, r3, #18
 800033a:	f002 fd1b 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 800033e:	4602      	mov	r2, r0
 8000340:	4613      	mov	r3, r2
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	009a      	lsls	r2, r3, #2
 8000348:	4413      	add	r3, r2
 800034a:	0b5b      	lsrs	r3, r3, #13
 800034c:	4a29      	ldr	r2, [pc, #164]	; (80003f4 <UART1_init+0x170>)
 800034e:	fba2 2303 	umull	r2, r3, r2, r3
 8000352:	461a      	mov	r2, r3
 8000354:	2364      	movs	r3, #100	; 0x64
 8000356:	fb03 f302 	mul.w	r3, r3, r2
 800035a:	1aeb      	subs	r3, r5, r3
 800035c:	011b      	lsls	r3, r3, #4
 800035e:	3332      	adds	r3, #50	; 0x32
 8000360:	4a26      	ldr	r2, [pc, #152]	; (80003fc <UART1_init+0x178>)
 8000362:	fba2 2303 	umull	r2, r3, r2, r3
 8000366:	095b      	lsrs	r3, r3, #5
 8000368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800036c:	441c      	add	r4, r3
 800036e:	f002 fd01 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 8000372:	4602      	mov	r2, r0
 8000374:	4613      	mov	r3, r2
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	009a      	lsls	r2, r3, #2
 800037c:	4413      	add	r3, r2
 800037e:	4a1e      	ldr	r2, [pc, #120]	; (80003f8 <UART1_init+0x174>)
 8000380:	fba2 2303 	umull	r2, r3, r2, r3
 8000384:	0c9d      	lsrs	r5, r3, #18
 8000386:	f002 fcf5 	bl	8002d74 <HAL_RCC_GetPCLK2Freq>
 800038a:	4602      	mov	r2, r0
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	009a      	lsls	r2, r3, #2
 8000394:	4413      	add	r3, r2
 8000396:	0b5b      	lsrs	r3, r3, #13
 8000398:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <UART1_init+0x170>)
 800039a:	fba2 2303 	umull	r2, r3, r2, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	2364      	movs	r3, #100	; 0x64
 80003a2:	fb03 f302 	mul.w	r3, r3, r2
 80003a6:	1aeb      	subs	r3, r5, r3
 80003a8:	011b      	lsls	r3, r3, #4
 80003aa:	3332      	adds	r3, #50	; 0x32
 80003ac:	4a13      	ldr	r2, [pc, #76]	; (80003fc <UART1_init+0x178>)
 80003ae:	fba2 2303 	umull	r2, r3, r2, r3
 80003b2:	095b      	lsrs	r3, r3, #5
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	4423      	add	r3, r4
 80003ba:	60b3      	str	r3, [r6, #8]
	 USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <UART1_init+0x16c>)
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <UART1_init+0x16c>)
 80003c0:	691b      	ldr	r3, [r3, #16]
 80003c2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80003c6:	6113      	str	r3, [r2, #16]
	 USART1->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80003c8:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <UART1_init+0x16c>)
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <UART1_init+0x16c>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80003d2:	6153      	str	r3, [r2, #20]
	 USART1->CR1 |=  USART_CR1_UE;
 80003d4:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <UART1_init+0x16c>)
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <UART1_init+0x16c>)
 80003d8:	68db      	ldr	r3, [r3, #12]
 80003da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003de:	60d3      	str	r3, [r2, #12]
 }
 80003e0:	bf00      	nop
 80003e2:	371c      	adds	r7, #28
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40011000 	.word	0x40011000
 80003f4:	000ba69f 	.word	0x000ba69f
 80003f8:	91a2b3c5 	.word	0x91a2b3c5
 80003fc:	51eb851f 	.word	0x51eb851f

08000400 <myprint>:
 int myprint(uint8_t *format)
 {
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	 int sizecount = 11;
 8000408:	230b      	movs	r3, #11
 800040a:	60fb      	str	r3, [r7, #12]
	 while(sizecount > 0U)
 800040c:	e00f      	b.n	800042e <myprint+0x2e>
	 {
	       sizecount--;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3b01      	subs	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
	       while (!(USART1->SR & USART_SR_TXE));
 8000414:	bf00      	nop
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <myprint+0x5c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f9      	beq.n	8000416 <myprint+0x16>
	       USART1->DR = (*format++ & (uint8_t)0xFFU);
 8000422:	490e      	ldr	r1, [pc, #56]	; (800045c <myprint+0x5c>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	1c5a      	adds	r2, r3, #1
 8000428:	607a      	str	r2, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	604b      	str	r3, [r1, #4]
	 while(sizecount > 0U)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1ec      	bne.n	800040e <myprint+0xe>
	 }

	 while (!(USART1->SR & USART_SR_TC));     // wait until TC bit is set
 8000434:	bf00      	nop
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <myprint+0x5c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f9      	beq.n	8000436 <myprint+0x36>
	    USART1->SR &= ~USART_SR_TC;
 8000442:	4a06      	ldr	r2, [pc, #24]	; (800045c <myprint+0x5c>)
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <myprint+0x5c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800044c:	6013      	str	r3, [r2, #0]

	 return 0;
 800044e:	2300      	movs	r3, #0
 }
 8000450:	4618      	mov	r0, r3
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	40011000 	.word	0x40011000

08000460 <SystemClock_Config>:

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b094      	sub	sp, #80	; 0x50
 8000464:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	4a2e      	ldr	r2, [pc, #184]	; (8000524 <SystemClock_Config+0xc4>)
 800046c:	4b2d      	ldr	r3, [pc, #180]	; (8000524 <SystemClock_Config+0xc4>)
 800046e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000474:	6413      	str	r3, [r2, #64]	; 0x40
 8000476:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <SystemClock_Config+0xc4>)
 8000478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800047a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	4a28      	ldr	r2, [pc, #160]	; (8000528 <SystemClock_Config+0xc8>)
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <SystemClock_Config+0xc8>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000494:	6013      	str	r3, [r2, #0]
 8000496:	4b24      	ldr	r3, [pc, #144]	; (8000528 <SystemClock_Config+0xc8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004a2:	2301      	movs	r3, #1
 80004a4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ac:	2302      	movs	r3, #2
 80004ae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80004b6:	2310      	movs	r3, #16
 80004b8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80004ba:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80004be:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80004c0:	2304      	movs	r3, #4
 80004c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80004c4:	2307      	movs	r3, #7
 80004c6:	64fb      	str	r3, [r7, #76]	; 0x4c

	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80004c8:	f107 0320 	add.w	r3, r7, #32
 80004cc:	4618      	mov	r0, r3
 80004ce:	f002 f85d 	bl	800258c <HAL_RCC_OscConfig>

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004d2:	230f      	movs	r3, #15
 80004d4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d6:	2302      	movs	r3, #2
 80004d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	2102      	movs	r1, #2
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 faa6 	bl	8002a40 <HAL_RCC_ClockConfig>

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80004f4:	f002 fc32 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 80004f8:	4602      	mov	r2, r0
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <SystemClock_Config+0xcc>)
 80004fc:	fba3 2302 	umull	r2, r3, r3, r2
 8000500:	099b      	lsrs	r3, r3, #6
 8000502:	4618      	mov	r0, r3
 8000504:	f000 ff3b 	bl	800137e <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000508:	2004      	movs	r0, #4
 800050a:	f000 ff45 	bl	8001398 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	f04f 30ff 	mov.w	r0, #4294967295
 8000516:	f000 ff08 	bl	800132a <HAL_NVIC_SetPriority>

}
 800051a:	bf00      	nop
 800051c:	3750      	adds	r7, #80	; 0x50
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40023800 	.word	0x40023800
 8000528:	40007000 	.word	0x40007000
 800052c:	10624dd3 	.word	0x10624dd3

08000530 <MX_TIM2_Init>:


/* TIM2 init function */
void MX_TIM2_Init(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_IC_InitTypeDef sConfigIC;

	htim2.Instance = TIM2;
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MX_TIM2_Init+0xa4>)
 8000538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 20;
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <MX_TIM2_Init+0xa4>)
 8000540:	2214      	movs	r2, #20
 8000542:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <MX_TIM2_Init+0xa4>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 32767;
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <MX_TIM2_Init+0xa4>)
 800054c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000550:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <MX_TIM2_Init+0xa4>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Init(&htim2);
 8000558:	481e      	ldr	r0, [pc, #120]	; (80005d4 <MX_TIM2_Init+0xa4>)
 800055a:	f002 ff4a 	bl	80033f2 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800055e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000562:	61bb      	str	r3, [r7, #24]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	4619      	mov	r1, r3
 800056a:	481a      	ldr	r0, [pc, #104]	; (80005d4 <MX_TIM2_Init+0xa4>)
 800056c:	f003 fa5c 	bl	8003a28 <HAL_TIM_ConfigClockSource>

	HAL_TIM_IC_Init(&htim2);
 8000570:	4818      	ldr	r0, [pc, #96]	; (80005d4 <MX_TIM2_Init+0xa4>)
 8000572:	f002 ffb9 	bl	80034e8 <HAL_TIM_IC_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	4619      	mov	r1, r3
 8000584:	4813      	ldr	r0, [pc, #76]	; (80005d4 <MX_TIM2_Init+0xa4>)
 8000586:	f003 ff40 	bl	800440a <HAL_TIMEx_MasterConfigSynchronization>

	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800058a:	230a      	movs	r3, #10
 800058c:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800058e:	2301      	movs	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1);
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	4619      	mov	r1, r3
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_TIM2_Init+0xa4>)
 80005a2:	f003 f8de 	bl	8003762 <HAL_TIM_IC_ConfigChannel>

	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2);
 80005a6:	463b      	mov	r3, r7
 80005a8:	2204      	movs	r2, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <MX_TIM2_Init+0xa4>)
 80005ae:	f003 f8d8 	bl	8003762 <HAL_TIM_IC_ConfigChannel>

	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3);
 80005b2:	463b      	mov	r3, r7
 80005b4:	2208      	movs	r2, #8
 80005b6:	4619      	mov	r1, r3
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <MX_TIM2_Init+0xa4>)
 80005ba:	f003 f8d2 	bl	8003762 <HAL_TIM_IC_ConfigChannel>

	HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4);
 80005be:	463b      	mov	r3, r7
 80005c0:	220c      	movs	r2, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <MX_TIM2_Init+0xa4>)
 80005c6:	f003 f8cc 	bl	8003762 <HAL_TIM_IC_ConfigChannel>

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000278 	.word	0x20000278

080005d8 <MX_TIM4_Init>:

/* TIM4 init function */
void MX_TIM4_Init(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;
	TIM_OC_InitTypeDef sConfigOC;

	htim4.Instance = TIM4;
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <MX_TIM4_Init+0xa0>)
 80005e0:	4a26      	ldr	r2, [pc, #152]	; (800067c <MX_TIM4_Init+0xa4>)
 80005e2:	601a      	str	r2, [r3, #0]
#ifdef MOTOR_DC
	htim4.Init.Prescaler = 84; /* DC motor configuration - Freq 494Hz*/
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <MX_TIM4_Init+0xa0>)
 80005e6:	2254      	movs	r2, #84	; 0x54
 80005e8:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <MX_TIM4_Init+0xa0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1999;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_TIM4_Init+0xa0>)
 80005f2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80005f6:	60da      	str	r2, [r3, #12]
	htim4.Init.Prescaler = 100; /* ESC motor configuration - Freq 400Hz*/
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 2075;
#endif

	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_TIM4_Init+0xa0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Init(&htim4);
 80005fe:	481e      	ldr	r0, [pc, #120]	; (8000678 <MX_TIM4_Init+0xa0>)
 8000600:	f002 fef7 	bl	80033f2 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800060a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060e:	4619      	mov	r1, r3
 8000610:	4819      	ldr	r0, [pc, #100]	; (8000678 <MX_TIM4_Init+0xa0>)
 8000612:	f003 fa09 	bl	8003a28 <HAL_TIM_ConfigClockSource>

	HAL_TIM_PWM_Init(&htim4);
 8000616:	4818      	ldr	r0, [pc, #96]	; (8000678 <MX_TIM4_Init+0xa0>)
 8000618:	f002 ff31 	bl	800347e <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4619      	mov	r1, r3
 800062a:	4813      	ldr	r0, [pc, #76]	; (8000678 <MX_TIM4_Init+0xa0>)
 800062c:	f003 feed 	bl	800440a <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000630:	2360      	movs	r3, #96	; 0x60
 8000632:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_TIM4_Init+0xa0>)
 8000648:	f003 f928 	bl	800389c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2204      	movs	r2, #4
 8000650:	4619      	mov	r1, r3
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_TIM4_Init+0xa0>)
 8000654:	f003 f922 	bl	800389c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2208      	movs	r2, #8
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	; (8000678 <MX_TIM4_Init+0xa0>)
 8000660:	f003 f91c 	bl	800389c <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4);
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	220c      	movs	r2, #12
 8000668:	4619      	mov	r1, r3
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <MX_TIM4_Init+0xa0>)
 800066c:	f003 f916 	bl	800389c <HAL_TIM_PWM_ConfigChannel>

}
 8000670:	bf00      	nop
 8000672:	3738      	adds	r7, #56	; 0x38
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000b4 	.word	0x200000b4
 800067c:	40000800 	.word	0x40000800

08000680 <MX_TIM9_Init>:

/* TIM9 init function */
void MX_TIM9_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig;

	htim9.Instance = TIM9;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_TIM9_Init+0x44>)
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <MX_TIM9_Init+0x48>)
 800068a:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 51;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_TIM9_Init+0x44>)
 800068e:	2233      	movs	r2, #51	; 0x33
 8000690:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_TIM9_Init+0x44>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 1999;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_TIM9_Init+0x44>)
 800069a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800069e:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_TIM9_Init+0x44>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Init(&htim9);
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <MX_TIM9_Init+0x44>)
 80006a8:	f002 fea3 	bl	80033f2 <HAL_TIM_Base_Init>

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	603b      	str	r3, [r7, #0]
	HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig);
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <MX_TIM9_Init+0x44>)
 80006b8:	f003 f9b6 	bl	8003a28 <HAL_TIM_ConfigClockSource>

}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200001cc 	.word	0x200001cc
 80006c8:	40014000 	.word	0x40014000

080006cc <MX_GPIO_Init>:
 * EVENT_OUT
 * EXTI
 * Free pins are configured automatically as Analog (this feature is enabled through
 * the Code Generation settings)
 */
void MX_GPIO_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE()
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4a1d      	ldr	r2, [pc, #116]	; (800074c <MX_GPIO_Init+0x80>)
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_GPIO_Init+0x80>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_GPIO_Init+0x80>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOA_CLK_ENABLE()
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4a16      	ldr	r2, [pc, #88]	; (800074c <MX_GPIO_Init+0x80>)
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_GPIO_Init+0x80>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_GPIO_Init+0x80>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
	;
	__GPIOB_CLK_ENABLE()
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4a0f      	ldr	r2, [pc, #60]	; (800074c <MX_GPIO_Init+0x80>)
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_GPIO_Init+0x80>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_GPIO_Init+0x80>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pins : PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8000726:	2330      	movs	r3, #48	; 0x30
 8000728:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800072a:	2311      	movs	r3, #17
 800072c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4619      	mov	r1, r3
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_GPIO_Init+0x84>)
 800073e:	f000 fe6f 	bl	8001420 <HAL_GPIO_Init>

}
 8000742:	bf00      	nop
 8000744:	3720      	adds	r7, #32
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40020400 	.word	0x40020400

08000754 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
/*
 *  Handle Timer9 interrupt @ 800Hz
 *  Set the event flag and increase time index
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <init_rc_variables>:
	// queue for test purpose
	cnt = 0;
	init_queue(&que);
}

void init_rc_variables(void) {
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
	uint32_t i;
	rc_connection_flag = 0;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <init_rc_variables+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++) {
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	e016      	b.n	80007a8 <init_rc_variables+0x40>
		rc_flag[i] = 0;
 800077a:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <init_rc_variables+0x58>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
		rc_t_rise[i] = 0;
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <init_rc_variables+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2100      	movs	r1, #0
 800078a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		rc_t_fall[i] = 0;
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <init_rc_variables+0x60>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2100      	movs	r1, #0
 8000794:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		rc_t[i] = 0;
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <init_rc_variables+0x64>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2100      	movs	r1, #0
 800079e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 4; i++) {
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3301      	adds	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d9e5      	bls.n	800077a <init_rc_variables+0x12>
	}
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	200003ee 	.word	0x200003ee
 80007c0:	200003c4 	.word	0x200003c4
 80007c4:	200003c8 	.word	0x200003c8
 80007c8:	20000440 	.word	0x20000440
 80007cc:	200003d8 	.word	0x200003d8

080007d0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
		}
	}
#endif
#ifdef REMOCON_BLE

	update_rc_data(0);
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 f823 	bl	8000824 <update_rc_data>

#endif
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	// Process user timer
	User_Timer_Callback();
 80007ec:	f000 f96c 	bl	8000ac8 <User_Timer_Callback>
	// Count rc_timeout up to 1s
	if (rc_timeout < 1000)
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_SYSTICK_Callback+0x34>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007f8:	da04      	bge.n	8000804 <HAL_SYSTICK_Callback+0x1c>
		rc_timeout++;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_SYSTICK_Callback+0x34>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_SYSTICK_Callback+0x34>)
 8000802:	6013      	str	r3, [r2, #0]
	if (rc_timeout > RC_TIMEOUT_VALUE)
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_SYSTICK_Callback+0x34>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b1e      	cmp	r3, #30
 800080a:	dd01      	ble.n	8000810 <HAL_SYSTICK_Callback+0x28>
		init_rc_variables();
 800080c:	f7ff ffac 	bl	8000768 <init_rc_variables>
#ifdef REMOCON_PWM
	rc_connection_flag = (rc_timeout <= RC_TIMEOUT_VALUE);
#endif
#ifdef REMOCON_BLE
	rc_connection_flag = 1; /* To modify and check status of BLE connection */
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_SYSTICK_Callback+0x38>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
#endif
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200003bc 	.word	0x200003bc
 8000820:	200003ee 	.word	0x200003ee

08000824 <update_rc_data>:

/* Update global variables of R/C data */
void update_rc_data(int32_t idx) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
		default: break;
	}
#endif

	// Activate Calibration Procedure  
	if ((gTHR == 0) && (gELE < - RC_CAL_THRESHOLD) && (gAIL > RC_CAL_THRESHOLD)
 800082c:	4b23      	ldr	r3, [pc, #140]	; (80008bc <update_rc_data+0x98>)
 800082e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d114      	bne.n	8000860 <update_rc_data+0x3c>
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <update_rc_data+0x9c>)
 8000838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800083c:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 8000840:	da0e      	bge.n	8000860 <update_rc_data+0x3c>
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <update_rc_data+0xa0>)
 8000844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000848:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800084c:	dd08      	ble.n	8000860 <update_rc_data+0x3c>
			&& (gRUD < - RC_CAL_THRESHOLD)) {
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <update_rc_data+0xa4>)
 8000850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000854:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 8000858:	da02      	bge.n	8000860 <update_rc_data+0x3c>
		rc_cal_flag = 1;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <update_rc_data+0xa8>)
 800085c:	2201      	movs	r2, #1
 800085e:	601a      	str	r2, [r3, #0]
	}

	// Activate Arming/Disarming 
	if ((gTHR == 0) && (gELE < - RC_CAL_THRESHOLD)
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <update_rc_data+0x98>)
 8000862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d122      	bne.n	80008b0 <update_rc_data+0x8c>
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <update_rc_data+0x9c>)
 800086c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000870:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 8000874:	da1c      	bge.n	80008b0 <update_rc_data+0x8c>
			&& (gAIL < - RC_CAL_THRESHOLD) && (gRUD > RC_CAL_THRESHOLD)) {
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <update_rc_data+0xa0>)
 8000878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800087c:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 8000880:	da16      	bge.n	80008b0 <update_rc_data+0x8c>
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <update_rc_data+0xa4>)
 8000884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000888:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800088c:	dd10      	ble.n	80008b0 <update_rc_data+0x8c>
		if (rc_enable_motor == 0) // if not armed -> arm
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <update_rc_data+0xac>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d106      	bne.n	80008a4 <update_rc_data+0x80>
				{
			rc_enable_motor = 1;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <update_rc_data+0xac>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
			fly_ready = 1;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <update_rc_data+0xb0>)
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]
		{
			rc_enable_motor = 0;
			fly_ready = 0;
		}
	}
}
 80008a2:	e005      	b.n	80008b0 <update_rc_data+0x8c>
			rc_enable_motor = 0;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <update_rc_data+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
			fly_ready = 0;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <update_rc_data+0xb0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	200003ea 	.word	0x200003ea
 80008c0:	200003e8 	.word	0x200003e8
 80008c4:	200003ec 	.word	0x200003ec
 80008c8:	2000043e 	.word	0x2000043e
 80008cc:	2000002c 	.word	0x2000002c
 80008d0:	20000030 	.word	0x20000030
 80008d4:	20000034 	.word	0x20000034

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */

/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 fd19 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ea:	f000 fd1e 	bl	800132a <HAL_NVIC_SetPriority>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_TIM_Base_MspInit>:
		/* USER CODE END SPI2_MspDeInit 1 */
	}

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct;
	if (htim_base->Instance == TIM2) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000904:	d126      	bne.n	8000954 <HAL_TIM_Base_MspInit+0x60>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__TIM2_CLK_ENABLE()
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4a34      	ldr	r2, [pc, #208]	; (80009dc <HAL_TIM_Base_MspInit+0xe8>)
 800090c:	4b33      	ldr	r3, [pc, #204]	; (80009dc <HAL_TIM_Base_MspInit+0xe8>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <HAL_TIM_Base_MspInit+0xe8>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
		 PA0-WKUP     ------> TIM2_CH1
		 PA1     ------> TIM2_CH2
		 PA2     ------> TIM2_CH3
		 PA3     ------> TIM2_CH4 
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 8000922:	230f      	movs	r3, #15
 8000924:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800092a:	2302      	movs	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000932:	2301      	movs	r3, #1
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4828      	ldr	r0, [pc, #160]	; (80009e0 <HAL_TIM_Base_MspInit+0xec>)
 800093e:	f000 fd6f 	bl	8001420 <HAL_GPIO_Init>

		/* Peripheral interrupt init*/
		HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2102      	movs	r1, #2
 8000946:	201c      	movs	r0, #28
 8000948:	f000 fcef 	bl	800132a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800094c:	201c      	movs	r0, #28
 800094e:	f000 fd08 	bl	8001362 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM9_MspInit 1 */

		/* USER CODE END TIM9_MspInit 1 */
	}

}
 8000952:	e03f      	b.n	80009d4 <HAL_TIM_Base_MspInit+0xe0>
	} else if (htim_base->Instance == TIM4) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <HAL_TIM_Base_MspInit+0xf0>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d11f      	bne.n	800099e <HAL_TIM_Base_MspInit+0xaa>
		__TIM4_CLK_ENABLE()
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <HAL_TIM_Base_MspInit+0xe8>)
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <HAL_TIM_Base_MspInit+0xe8>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <HAL_TIM_Base_MspInit+0xe8>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800097a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800097e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800098c:	2302      	movs	r3, #2
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4814      	ldr	r0, [pc, #80]	; (80009e8 <HAL_TIM_Base_MspInit+0xf4>)
 8000998:	f000 fd42 	bl	8001420 <HAL_GPIO_Init>
}
 800099c:	e01a      	b.n	80009d4 <HAL_TIM_Base_MspInit+0xe0>
	} else if (htim_base->Instance == TIM9) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <HAL_TIM_Base_MspInit+0xf8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d115      	bne.n	80009d4 <HAL_TIM_Base_MspInit+0xe0>
		__TIM9_CLK_ENABLE()
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <HAL_TIM_Base_MspInit+0xe8>)
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_TIM_Base_MspInit+0xe8>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b6:	6453      	str	r3, [r2, #68]	; 0x44
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_TIM_Base_MspInit+0xe8>)
 80009ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 3, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2103      	movs	r1, #3
 80009c8:	2018      	movs	r0, #24
 80009ca:	f000 fcae 	bl	800132a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80009ce:	2018      	movs	r0, #24
 80009d0:	f000 fcc7 	bl	8001362 <HAL_NVIC_EnableIRQ>
}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40000800 	.word	0x40000800
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40014000 	.word	0x40014000

080009f0 <SysTick_Handler>:
/******************************************************************************/

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80009f4:	f000 fbaa 	bl	800114c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80009f8:	f000 fcea 	bl	80013d0 <HAL_SYSTICK_IRQHandler>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <TIM1_BRK_TIM9_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM1 Break interrupt and TIM9 global interrupt.
 */
void TIM1_BRK_TIM9_IRQHandler(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	/* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
	HAL_TIM_IRQHandler(&htim9);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000a06:	f002 fda4 	bl	8003552 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

	/* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001cc 	.word	0x200001cc

08000a14 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <TIM2_IRQHandler+0x10>)
 8000a1a:	f002 fd9a 	bl	8003552 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000278 	.word	0x20000278

08000a28 <SPI1_IRQHandler>:

/**
 * @brief This function handles SPI1 global interrupt.
 */
void SPI1_IRQHandler(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_IRQn 0 */

	/* USER CODE END SPI1_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi1);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <SPI1_IRQHandler+0x10>)
 8000a2e:	f002 fb63 	bl	80030f8 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI1_IRQn 1 */

	/* USER CODE END SPI1_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000220 	.word	0x20000220

08000a3c <SPI2_IRQHandler>:

/**
 * @brief This function handles SPI2 global interrupt.
 */
void SPI2_IRQHandler(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI2_IRQn 0 */

	/* USER CODE END SPI2_IRQn 0 */
	HAL_SPI_IRQHandler(&hspi2);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <SPI2_IRQHandler+0x10>)
 8000a42:	f002 fb59 	bl	80030f8 <HAL_SPI_IRQHandler>
	/* USER CODE BEGIN SPI2_IRQn 1 */

	/* USER CODE END SPI2_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000058 	.word	0x20000058

08000a50 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <USART1_IRQHandler+0x10>)
 8000a56:	f003 fd31 	bl	80044bc <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000015c 	.word	0x2000015c

08000a64 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <OTG_FS_IRQHandler+0x10>)
 8000a6a:	f000 fea5 	bl	80017b8 <HAL_PCD_IRQHandler>
	/* USER CODE BEGIN OTG_FS_IRQn 1 */

	/* USER CODE END OTG_FS_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000464 	.word	0x20000464

08000a78 <EXTI4_IRQHandler>:
 *         interrupt request for BlueNRG.
 * @param  None
 * @retval None
 */

void EXTI4_IRQHandler(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a7c:	2010      	movs	r0, #16
 8000a7e:	f000 fe83 	bl	8001788 <HAL_GPIO_EXTI_IRQHandler>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <TimerProcess>:

void ClearTimer(tUserTimer *t) {
	t->event_cnt = 0;
}

void TimerProcess(tUserTimer *t) {
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b084      	sub	sp, #16
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
	uint32_t k;
	if (t->flag && HAL_GetTick() >= t->target_tick) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d014      	beq.n	8000ac0 <TimerProcess+0x3a>
 8000a96:	f000 fb67 	bl	8001168 <HAL_GetTick>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d30d      	bcc.n	8000ac0 <TimerProcess+0x3a>
		t->event_cnt++;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	611a      	str	r2, [r3, #16]
		k = t->target_tick; // to prevent Warning volatile access in IAR EWARM  
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
		t->target_tick = k + t->interval;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	441a      	add	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	601a      	str	r2, [r3, #0]

	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <User_Timer_Callback>:

uint32_t isTimerEventExist(tUserTimer *t) {
	return t->event_cnt;
}

void User_Timer_Callback(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	TimerProcess(&tim);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <User_Timer_Callback+0x10>)
 8000ace:	f7ff ffda 	bl	8000a86 <TimerProcess>
	// Add additional timer processing if more user timers
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000450 	.word	0x20000450

08000adc <HAL_PCD_SetupStageCallback>:
/**
 * @brief  Setup stage callback
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	USBD_LL_SetupStage(hpcd->pData, (uint8_t *) hpcd->Setup);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8000af0:	4619      	mov	r1, r3
 8000af2:	4610      	mov	r0, r2
 8000af4:	f004 ff65 	bl	80059c2 <USBD_LL_SetupStage>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_PCD_DataOutStageCallback>:
 * @brief  Data Out stage callback.
 * @param  hpcd: PCD handle
 * @param  epnum: Endpoint Number
 * @retval None
 */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
	USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8000b12:	78fa      	ldrb	r2, [r7, #3]
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	4613      	mov	r3, r2
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	1a9b      	subs	r3, r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	78fb      	ldrb	r3, [r7, #3]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f004 ff94 	bl	8005a56 <USBD_LL_DataOutStage>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_PCD_DataInStageCallback>:
 * @brief  Data In stage callback..
 * @param  hpcd: PCD handle
 * @param  epnum: Endpoint Number
 * @retval None
 */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	70fb      	strb	r3, [r7, #3]
	USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 8000b48:	78fa      	ldrb	r2, [r7, #3]
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	1a9b      	subs	r3, r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	440b      	add	r3, r1
 8000b56:	3344      	adds	r3, #68	; 0x44
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f004 ffd5 	bl	8005b0c <USBD_LL_DataInStage>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_PCD_SOFCallback>:
/**
 * @brief  SOF callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd) {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	USBD_LL_SOF(hpcd->pData);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f005 f8bb 	bl	8005cf4 <USBD_LL_SOF>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_PCD_ResetCallback>:
/**
 * @brief  Reset callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]

	/*Set USB Current Speed*/
	switch (hpcd->Init.speed) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <HAL_PCD_ResetCallback+0x1a>
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d003      	beq.n	8000ba6 <HAL_PCD_ResetCallback+0x20>
 8000b9e:	e005      	b.n	8000bac <HAL_PCD_ResetCallback+0x26>
	case PCD_SPEED_HIGH:
		speed = USBD_SPEED_HIGH;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
		break;
 8000ba4:	e005      	b.n	8000bb2 <HAL_PCD_ResetCallback+0x2c>
	case PCD_SPEED_FULL:
		speed = USBD_SPEED_FULL;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
		break;
 8000baa:	e002      	b.n	8000bb2 <HAL_PCD_ResetCallback+0x2c>

	default:
		speed = USBD_SPEED_FULL;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
		break;
 8000bb0:	bf00      	nop
	}
	USBD_LL_SetSpeed(hpcd->pData, speed);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000bb8:	7bfa      	ldrb	r2, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f005 f863 	bl	8005c88 <USBD_LL_SetSpeed>

	/*Reset Device*/
	USBD_LL_Reset(hpcd->pData);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f005 f82e 	bl	8005c2a <USBD_LL_Reset>
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_PCD_SuspendCallback>:
 * @brief  Suspend callback.
 * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	/* Inform USB library that core enters in suspend Mode */
	USBD_LL_Suspend(hpcd->pData);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000be6:	4618      	mov	r0, r3
 8000be8:	f005 f85e 	bl	8005ca8 <USBD_LL_Suspend>
	__HAL_PCD_GATE_PHYCLOCK(hpcd);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6013      	str	r3, [r2, #0]
	/*Enter in STOP mode */
	/* USER CODE BEGIN 2 */
	if (hpcd->Init.low_power_enable) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a1b      	ldr	r3, [r3, #32]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d005      	beq.n	8000c1a <HAL_PCD_SuspendCallback+0x42>
		/* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
		SCB->SCR |= (uint32_t) ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <HAL_PCD_SuspendCallback+0x4c>)
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <HAL_PCD_SuspendCallback+0x4c>)
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	f043 0306 	orr.w	r3, r3, #6
 8000c18:	6113      	str	r3, [r2, #16]
				| SCB_SCR_SLEEPONEXIT_Msk));
	}
	/* USER CODE END 2 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <HAL_PCD_ResumeCallback>:
 * @brief  Resume callback.
 When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 3 */
	/* USER CODE END 3 */
	USBD_LL_Resume(hpcd->pData);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000c36:	4618      	mov	r0, r3
 8000c38:	f005 f84b 	bl	8005cd2 <USBD_LL_Resume>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_PCD_ISOOUTIncompleteCallback>:
 * @brief  ISOC Out Incomplete callback.
 * @param  hpcd: PCD handle
 * @param  epnum: Endpoint Number
 * @retval None
 */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000c56:	78fa      	ldrb	r2, [r7, #3]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f005 f871 	bl	8005d42 <USBD_LL_IsoOUTIncomplete>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_PCD_ISOINIncompleteCallback>:
 * @brief  ISOC In Incomplete callback.
 * @param  hpcd: PCD handle
 * @param  epnum: Endpoint Number
 * @retval None
 */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000c7a:	78fa      	ldrb	r2, [r7, #3]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f005 f852 	bl	8005d28 <USBD_LL_IsoINIncomplete>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_PCD_ConnectCallback>:
/**
 * @brief  Connect callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	USBD_LL_DevConnected(hpcd->pData);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f005 f85e 	bl	8005d5c <USBD_LL_DevConnected>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_PCD_DisconnectCallback>:
/**
 * @brief  Disconnect callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	USBD_LL_DevDisconnected(hpcd->pData);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f005 f85b 	bl	8005d72 <USBD_LL_DevDisconnected>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <USBD_LL_OpenEP>:
 * @param  ep_type: Endpoint Type
 * @param  ep_mps: Endpoint Max Packet Size                 
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	4608      	mov	r0, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	70fb      	strb	r3, [r7, #3]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	70bb      	strb	r3, [r7, #2]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	803b      	strh	r3, [r7, #0]

	HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8000ce4:	78bb      	ldrb	r3, [r7, #2]
 8000ce6:	883a      	ldrh	r2, [r7, #0]
 8000ce8:	78f9      	ldrb	r1, [r7, #3]
 8000cea:	f001 fa0e 	bl	800210a <HAL_PCD_EP_Open>

	return USBD_OK;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <USBD_LL_StallEP>:
 * @brief  Sets a Stall condition on an endpoint of the Low Level Driver.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000d0a:	78fa      	ldrb	r2, [r7, #3]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fb14 	bl	800233c <HAL_PCD_EP_SetStall>
	return USBD_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <USBD_LL_ClearStallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr) {
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	460b      	mov	r3, r1
 8000d28:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000d30:	78fa      	ldrb	r2, [r7, #3]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fb5c 	bl	80023f2 <HAL_PCD_EP_ClrStall>
	return USBD_OK;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <USBD_LL_IsStallEP>:
 * @brief  Returns Stall condition.
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr) {
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = pdev->pData;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000d56:	60fb      	str	r3, [r7, #12]

	if ((ep_addr & 0x80) == 0x80) {
 8000d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da0b      	bge.n	8000d78 <USBD_LL_IsStallEP+0x34>
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000d66:	68f9      	ldr	r1, [r7, #12]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	333a      	adds	r3, #58	; 0x3a
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	e00b      	b.n	8000d90 <USBD_LL_IsStallEP+0x4c>
	} else {
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000d7e:	68f9      	ldr	r1, [r7, #12]
 8000d80:	4613      	mov	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	1a9b      	subs	r3, r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8000d8e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <USBD_LL_SetUSBAddress>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000dae:	78fa      	ldrb	r2, [r7, #3]
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 f988 	bl	80020c8 <HAL_PCD_SetAddress>
	return USBD_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <USBD_LL_Transmit>:
 * @param  pbuf: Pointer to data to be sent
 * @param  size: Data size    
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint16_t size) {
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	460b      	mov	r3, r1
 8000dd0:	72fb      	strb	r3, [r7, #11]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	813b      	strh	r3, [r7, #8]

	HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8000ddc:	893b      	ldrh	r3, [r7, #8]
 8000dde:	7af9      	ldrb	r1, [r7, #11]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	f001 fa53 	bl	800228c <HAL_PCD_EP_Transmit>
	return USBD_OK;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <USBD_LL_PrepareReceive>:
 * @param  pbuf: Pointer to data to be received
 * @param  size: Data size
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf, uint16_t size) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	72fb      	strb	r3, [r7, #11]
 8000e00:	4613      	mov	r3, r2
 8000e02:	813b      	strh	r3, [r7, #8]

	HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8000e0a:	893b      	ldrh	r3, [r7, #8]
 8000e0c:	7af9      	ldrb	r1, [r7, #11]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	f001 f9e3 	bl	80021da <HAL_PCD_EP_Receive>
	return USBD_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10d      	bne.n	8000e4c <BSP_LED_Init+0x2c>
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	4a1a      	ldr	r2, [pc, #104]	; (8000ea0 <BSP_LED_Init+0x80>)
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <BSP_LED_Init+0x80>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <BSP_LED_Init+0x80>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d10d      	bne.n	8000e6e <BSP_LED_Init+0x4e>
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <BSP_LED_Init+0x80>)
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <BSP_LED_Init+0x80>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <BSP_LED_Init+0x80>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <BSP_LED_Init+0x84>)
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e80:	2302      	movs	r3, #2
 8000e82:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <BSP_LED_Init+0x88>)
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	f107 0214 	add.w	r2, r7, #20
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fac4 	bl	8001420 <HAL_GPIO_Init>
}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	080066e4 	.word	0x080066e4
 8000ea8:	20000000 	.word	0x20000000

08000eac <BSP_LED_On>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_On(Led_TypeDef Led)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <BSP_LED_On+0x2c>)
 8000eba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <BSP_LED_On+0x30>)
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f000 fc42 	bl	8001754 <HAL_GPIO_WritePin>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	080066e4 	.word	0x080066e4

08000ee0 <BSP_LED_Off>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Off(Led_TypeDef Led)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <BSP_LED_Off+0x2c>)
 8000eee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <BSP_LED_Off+0x30>)
 8000ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	2201      	movs	r2, #1
 8000efe:	4619      	mov	r1, r3
 8000f00:	f000 fc28 	bl	8001754 <HAL_GPIO_WritePin>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	080066e4 	.word	0x080066e4

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <SystemInit+0x60>)
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <SystemInit+0x60>)
 8000f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <SystemInit+0x64>)
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <SystemInit+0x64>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <SystemInit+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <SystemInit+0x64>)
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <SystemInit+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <SystemInit+0x64>)
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <SystemInit+0x68>)
 8000f4e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f50:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <SystemInit+0x64>)
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <SystemInit+0x64>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SystemInit+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SystemInit+0x60>)
 8000f64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f68:	609a      	str	r2, [r3, #8]
#endif
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	24003010 	.word	0x24003010

08000f80 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callback.
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	2b10      	cmp	r3, #16
 8000f8e:	d000      	beq.n	8000f92 <HAL_GPIO_EXTI_Callback+0x12>
    case BNRG_SPI_EXTI_PIN:
      HCI_Isr();
      HCI_ProcessEvent=1;
    break;
  }
}
 8000f90:	e005      	b.n	8000f9e <HAL_GPIO_EXTI_Callback+0x1e>
      HCI_Isr();
 8000f92:	f004 fbdd 	bl	8005750 <HCI_Isr>
      HCI_ProcessEvent=1;
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x28>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
    break;
 8000f9c:	bf00      	nop
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000028 	.word	0x20000028

08000fac <BlueNRG_DataPresent>:
* @param  None
* @retval 1 if data are present, 0 otherwise
*/
// FIXME: find a better way to handle this return value (bool type? TRUE and FALSE)
uint8_t BlueNRG_DataPresent(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(BNRG_SPI_EXTI_PORT, BNRG_SPI_EXTI_PIN) == GPIO_PIN_SET)
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <BlueNRG_DataPresent+0x1c>)
 8000fb4:	f000 fbb6 	bl	8001724 <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d101      	bne.n	8000fc2 <BlueNRG_DataPresent+0x16>
    return 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <BlueNRG_DataPresent+0x18>
  else  
    return 0;
 8000fc2:	2300      	movs	r3, #0
} /* end BlueNRG_DataPresent() */
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40020000 	.word	0x40020000

08000fcc <BlueNRG_SPI_Read_All>:
* @param  buff_size: Buffer size
* @retval int32_t  : Number of read bytes
*/
int32_t BlueNRG_SPI_Read_All(SPI_HandleTypeDef *hspi, uint8_t *buffer,
                             uint8_t buff_size)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	71fb      	strb	r3, [r7, #7]
  uint16_t byte_count;
  uint8_t len = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t char_ff = 0xff;
 8000fe0:	23ff      	movs	r3, #255	; 0xff
 8000fe2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  volatile uint8_t read_char;
  
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	773b      	strb	r3, [r7, #28]
 8000fea:	2300      	movs	r3, #0
 8000fec:	777b      	strb	r3, [r7, #29]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	77bb      	strb	r3, [r7, #30]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	77fb      	strb	r3, [r7, #31]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t header_slave[HEADER_SIZE];
  
  /* CS reset */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2101      	movs	r1, #1
 8001000:	482c      	ldr	r0, [pc, #176]	; (80010b4 <BlueNRG_SPI_Read_All+0xe8>)
 8001002:	f000 fba7 	bl	8001754 <HAL_GPIO_WritePin>
  
  /* Read the header */  
  HAL_SPI_TransmitReceive(hspi, header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
 8001006:	f107 0214 	add.w	r2, r7, #20
 800100a:	f107 011c 	add.w	r1, r7, #28
 800100e:	230f      	movs	r3, #15
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2305      	movs	r3, #5
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f001 fecf 	bl	8002db8 <HAL_SPI_TransmitReceive>
  
  if (header_slave[0] == 0x02) {
 800101a:	7d3b      	ldrb	r3, [r7, #20]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d134      	bne.n	800108a <BlueNRG_SPI_Read_All+0xbe>
    /* device is ready */
    byte_count = (header_slave[4]<<8)|header_slave[3];
 8001020:	7e3b      	ldrb	r3, [r7, #24]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21b      	sxth	r3, r3
 800102e:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (byte_count > 0) {
 8001030:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001032:	2b00      	cmp	r3, #0
 8001034:	d029      	beq.n	800108a <BlueNRG_SPI_Read_All+0xbe>
      
      /* avoid to read more data that size of the buffer */
      if (byte_count > buff_size){
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	b29b      	uxth	r3, r3
 800103a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800103c:	429a      	cmp	r2, r3
 800103e:	d901      	bls.n	8001044 <BlueNRG_SPI_Read_All+0x78>
        byte_count = buff_size;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	84fb      	strh	r3, [r7, #38]	; 0x26
      }
      
      for (len = 0; len < byte_count; len++){
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800104a:	e018      	b.n	800107e <BlueNRG_SPI_Read_All+0xb2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
        __disable_irq();
        HAL_SPI_TransmitReceive(hspi, &char_ff, (uint8_t*)&read_char, 1, TIMEOUT_DURATION);
 800104e:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001052:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001056:	230f      	movs	r3, #15
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f001 feab 	bl	8002db8 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 8001062:	b662      	cpsie	i
        __enable_irq();
        buffer[len] = read_char;
 8001064:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	4413      	add	r3, r2
 800106c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	701a      	strb	r2, [r3, #0]
      for (len = 0; len < byte_count; len++){
 8001074:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001078:	3301      	adds	r3, #1
 800107a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800107e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001082:	b29b      	uxth	r3, r3
 8001084:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001086:	429a      	cmp	r2, r3
 8001088:	d8e0      	bhi.n	800104c <BlueNRG_SPI_Read_All+0x80>
      }
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2101      	movs	r1, #1
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <BlueNRG_SPI_Read_All+0xe8>)
 8001090:	f000 fb60 	bl	8001754 <HAL_GPIO_WritePin>
  
  // Add a small delay to give time to the BlueNRG to set the IRQ pin low
  // to avoid a useless SPI read at the end of the transaction
  for(volatile int i = 0; i < 2; i++)__NOP();
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	e003      	b.n	80010a2 <BlueNRG_SPI_Read_All+0xd6>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800109a:	bf00      	nop
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	3301      	adds	r3, #1
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	ddf8      	ble.n	800109a <BlueNRG_SPI_Read_All+0xce>
    }
    PRINT_CSV("\n");
  }
#endif
  
  return len;   
 80010a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40020400 	.word	0x40020400

080010b8 <Clear_SPI_EXTI_Flag>:
* @brief  Clear EXTI (External Interrupt) line for SPI IRQ.
* @param  None
* @retval None
*/
void Clear_SPI_EXTI_Flag(void)
{  
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);  
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <Clear_SPI_EXTI_Flag+0x14>)
 80010be:	2210      	movs	r2, #16
 80010c0:	615a      	str	r2, [r3, #20]
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40013c00 	.word	0x40013c00

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f90b 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fbe8 	bl	80008d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_InitTick+0x30>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <HAL_InitTick+0x34>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	099b      	lsrs	r3, r3, #6
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f928 	bl	800137e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800112e:	2200      	movs	r2, #0
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	f000 f8f8 	bl	800132a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000008 	.word	0x20000008
 8001148:	10624dd3 	.word	0x10624dd3

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick++;
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <HAL_IncTick+0x18>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	4a03      	ldr	r2, [pc, #12]	; (8001164 <HAL_IncTick+0x18>)
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	200008ac 	.word	0x200008ac

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200008ac 	.word	0x200008ac

08001180 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011ee:	4909      	ldr	r1, [pc, #36]	; (8001214 <NVIC_EnableIRQ+0x30>)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	095b      	lsrs	r3, r3, #5
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	f002 021f 	and.w	r2, r2, #31
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da0b      	bge.n	8001244 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	490d      	ldr	r1, [pc, #52]	; (8001264 <NVIC_SetPriority+0x4c>)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	3b04      	subs	r3, #4
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001242:	e009      	b.n	8001258 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	4908      	ldr	r1, [pc, #32]	; (8001268 <NVIC_SetPriority+0x50>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	e000e100 	.word	0xe000e100

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	2201      	movs	r2, #1
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	401a      	ands	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b2:	2101      	movs	r1, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	1e59      	subs	r1, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f7ff ff90 	bl	8001218 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff2f 	bl	8001180 <NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff44 	bl	80011c8 <NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff90 	bl	800126c <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5f 	bl	8001218 <NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff37 	bl	80011e4 <NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa2 	bl	80012d0 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d106      	bne.n	80013b4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80013b2:	e005      	b.n	80013c0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013b4:	4a05      	ldr	r2, [pc, #20]	; (80013cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 0304 	bic.w	r3, r3, #4
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80013d4:	f7ff fa08 	bl	80007e8 <HAL_SYSTICK_Callback>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d004      	beq.n	80013fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00c      	b.n	8001414 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2205      	movs	r2, #5
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e159      	b.n	80016f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 800143c:	2201      	movs	r2, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	429a      	cmp	r2, r3
 8001456:	f040 8148 	bne.w	80016ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x4a>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b12      	cmp	r3, #18
 8001468:	d123      	bne.n	80014b2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	69b9      	ldr	r1, [r7, #24]
 80014ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0203 	and.w	r2, r3, #3
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d00b      	beq.n	8001506 <HAL_GPIO_Init+0xe6>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d007      	beq.n	8001506 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014fa:	2b11      	cmp	r3, #17
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b12      	cmp	r3, #18
 8001504:	d130      	bne.n	8001568 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 0201 	and.w	r2, r3, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80a2 	beq.w	80016ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4a56      	ldr	r2, [pc, #344]	; (8001704 <HAL_GPIO_Init+0x2e4>)
 80015ac:	4b55      	ldr	r3, [pc, #340]	; (8001704 <HAL_GPIO_Init+0x2e4>)
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <HAL_GPIO_Init+0x2e4>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c2:	4a51      	ldr	r2, [pc, #324]	; (8001708 <HAL_GPIO_Init+0x2e8>)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2ec>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d019      	beq.n	8001622 <HAL_GPIO_Init+0x202>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a47      	ldr	r2, [pc, #284]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x1fe>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_GPIO_Init+0x2f4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x1fa>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_GPIO_Init+0x2f8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x1f6>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a44      	ldr	r2, [pc, #272]	; (800171c <HAL_GPIO_Init+0x2fc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x1f2>
 800160e:	2304      	movs	r3, #4
 8001610:	e008      	b.n	8001624 <HAL_GPIO_Init+0x204>
 8001612:	2307      	movs	r3, #7
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x204>
 8001616:	2303      	movs	r3, #3
 8001618:	e004      	b.n	8001624 <HAL_GPIO_Init+0x204>
 800161a:	2302      	movs	r3, #2
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x204>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x204>
 8001622:	2300      	movs	r3, #0
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	f002 0203 	and.w	r2, r2, #3
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	4093      	lsls	r3, r2
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001634:	4934      	ldr	r1, [pc, #208]	; (8001708 <HAL_GPIO_Init+0x2e8>)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001642:	4b37      	ldr	r3, [pc, #220]	; (8001720 <HAL_GPIO_Init+0x300>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001666:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <HAL_GPIO_Init+0x300>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <HAL_GPIO_Init+0x300>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001690:	4a23      	ldr	r2, [pc, #140]	; (8001720 <HAL_GPIO_Init+0x300>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_GPIO_Init+0x300>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ba:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_GPIO_Init+0x300>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_GPIO_Init+0x300>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e4:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_GPIO_Init+0x300>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3301      	adds	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	2b0f      	cmp	r3, #15
 80016f4:	f67f aea2 	bls.w	800143c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f8:	bf00      	nop
 80016fa:	3724      	adds	r7, #36	; 0x24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40013c00 	.word	0x40013c00

08001724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e001      	b.n	8001746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
 8001760:	4613      	mov	r3, r2
 8001762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001764:	787b      	ldrb	r3, [r7, #1]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001770:	e003      	b.n	800177a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001772:	887b      	ldrh	r3, [r7, #2]
 8001774:	041a      	lsls	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	619a      	str	r2, [r3, #24]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fbea 	bl	8000f80 <HAL_GPIO_EXTI_Callback>
  }
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40013c00 	.word	0x40013c00

080017b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000;
 80017de:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <HAL_PCD_IRQHandler+0x218>)
 80017e0:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 ff09 	bl	80055fe <USB_GetMode>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 8466 	bne.w	80020c0 <HAL_PCD_IRQHandler+0x908>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fe75 	bl	80054e8 <USB_ReadInterrupts>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 845c 	beq.w	80020be <HAL_PCD_IRQHandler+0x906>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f003 fe6c 	bl	80054e8 <USB_ReadInterrupts>
 8001810:	4603      	mov	r3, r0
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d107      	bne.n	800182a <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	6952      	ldr	r2, [r2, #20]
 8001824:	f002 0202 	and.w	r2, r2, #2
 8001828:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fe5a 	bl	80054e8 <USB_ReadInterrupts>
 8001834:	4603      	mov	r3, r0
 8001836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800183a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800183e:	f040 80b2 	bne.w	80019a6 <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fe61 	bl	8005512 <USB_ReadDevAllOutEpInterrupt>
 8001850:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8001852:	e0a4      	b.n	800199e <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8001854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8099 	beq.w	8001992 <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fe81 	bl	8005572 <USB_ReadDevOutEPInterrupt>
 8001870:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d06b      	beq.n	8001954 <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	015a      	lsls	r2, r3, #5
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	4413      	add	r3, r2
 8001884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001888:	461a      	mov	r2, r3
 800188a:	2301      	movs	r3, #1
 800188c:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d13c      	bne.n	8001910 <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	0159      	lsls	r1, r3, #5
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	440b      	add	r3, r1
 80018b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018bc:	1ad1      	subs	r1, r2, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4403      	add	r3, r0
 80018cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018d0:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4403      	add	r3, r0
 80018f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4419      	add	r1, r3
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4403      	add	r3, r0
 800190a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800190e:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4619      	mov	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff f8f2 	bl	8000b00 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d117      	bne.n	8001954 <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	2b00      	cmp	r3, #0
 8001928:	d114      	bne.n	8001954 <HAL_PCD_IRQHandler+0x19c>
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d108      	bne.n	8001954 <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800194c:	461a      	mov	r2, r3
 800194e:	2101      	movs	r1, #1
 8001950:	f003 fe99 	bl	8005686 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff f8bc 	bl	8000adc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	4413      	add	r3, r2
 800196c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001970:	461a      	mov	r2, r3
 8001972:	2308      	movs	r3, #8
 8001974:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800198c:	461a      	mov	r2, r3
 800198e:	2310      	movs	r3, #16
 8001990:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	3301      	adds	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f47f af57 	bne.w	8001854 <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 fd9c 	bl	80054e8 <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019ba:	f040 80c5 	bne.w	8001b48 <HAL_PCD_IRQHandler+0x390>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fdbd 	bl	8005542 <USB_ReadDevAllInEpInterrupt>
 80019c8:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 80019ce:	e0b7      	b.n	8001b40 <HAL_PCD_IRQHandler+0x388>
 80019d0:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 80019d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80aa 	beq.w	8001b34 <HAL_PCD_IRQHandler+0x37c>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fddd 	bl	80055aa <USB_ReadDevInEPInterrupt>
 80019f0:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d05a      	beq.n	8001ab2 <HAL_PCD_IRQHandler+0x2fa>
          {
            fifoemptymsk = 0x1U << epnum;
 80019fc:	2201      	movs	r2, #1
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d11b      	bne.n	8001a70 <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	3344      	adds	r3, #68	; 0x44
 8001a48:	6819      	ldr	r1, [r3, #0]
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4403      	add	r3, r0
 8001a58:	3340      	adds	r3, #64	; 0x40
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4419      	add	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4403      	add	r3, r0
 8001a6c:	3344      	adds	r3, #68	; 0x44
 8001a6e:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff f85d 	bl	8000b36 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d116      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x2fa>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d113      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x2fa>
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	334c      	adds	r3, #76	; 0x4c
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d108      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x2fa>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2101      	movs	r1, #1
 8001aae:	f003 fdea 	bl	8005686 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_PCD_IRQHandler+0x316>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	015a      	lsls	r2, r3, #5
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2308      	movs	r3, #8
 8001acc:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_PCD_IRQHandler+0x332>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2310      	movs	r3, #16
 8001ae8:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_PCD_IRQHandler+0x34e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	015a      	lsls	r2, r3, #5
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	4413      	add	r3, r2
 8001afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b00:	461a      	mov	r2, r3
 8001b02:	2340      	movs	r3, #64	; 0x40
 8001b04:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_PCD_IRQHandler+0x36a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2302      	movs	r3, #2
 8001b20:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_PCD_IRQHandler+0x37c>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8001b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fcaa 	bl	8002488 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	3301      	adds	r3, #1
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f47f af46 	bne.w	80019d4 <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fccb 	bl	80054e8 <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b5c:	d115      	bne.n	8001b8a <HAL_PCD_IRQHandler+0x3d2>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b64:	461a      	mov	r2, r3
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff f857 	bl	8000c28 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	6952      	ldr	r2, [r2, #20]
 8001b84:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b88:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fcaa 	bl	80054e8 <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b9e:	d112      	bne.n	8001bc6 <HAL_PCD_IRQHandler+0x40e>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d102      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x3fe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff f811 	bl	8000bd8 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	6952      	ldr	r2, [r2, #20]
 8001bc0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bc4:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fc8c 	bl	80054e8 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bda:	f040 8091 	bne.w	8001d00 <HAL_PCD_IRQHandler+0x548>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001be4:	461a      	mov	r2, r3
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0U);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 fe90 	bl	8004920 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c04:	e014      	b.n	8001c30 <HAL_PCD_IRQHandler+0x478>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c12:	461a      	mov	r2, r3
 8001c14:	23ff      	movs	r3, #255	; 0xff
 8001c16:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c24:	461a      	mov	r2, r3
 8001c26:	23ff      	movs	r3, #255	; 0xff
 8001c28:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d8e5      	bhi.n	8001c06 <HAL_PCD_IRQHandler+0x44e>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c40:	461a      	mov	r2, r3
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c5c:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d018      	beq.n	8001c98 <HAL_PCD_IRQHandler+0x4e0>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c78:	f043 030b 	orr.w	r3, r3, #11
 8001c7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c86:	461a      	mov	r2, r3
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f043 030b 	orr.w	r3, r3, #11
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	e015      	b.n	8001cc4 <HAL_PCD_IRQHandler+0x50c>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f043 030b 	orr.w	r3, r3, #11
 8001cac:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f043 030b 	orr.w	r3, r3, #11
 8001cc2:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cca:	461a      	mov	r2, r3
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cd8:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	b2d9      	uxtb	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001cea:	461a      	mov	r2, r3
 8001cec:	f003 fccb 	bl	8005686 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	6952      	ldr	r2, [r2, #20]
 8001cfa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001cfe:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fbef 	bl	80054e8 <USB_ReadInterrupts>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d14:	f040 80d7 	bne.w	8001ec6 <HAL_PCD_IRQHandler+0x70e>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fc7c 	bl	800561a <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	68d2      	ldr	r2, [r2, #12]
 8001d2c:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001d30:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 fe18 	bl	800496c <USB_GetDevSpeed>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x5aa>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4e:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	68d2      	ldr	r2, [r2, #12]
 8001d5a:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	e0a6      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x6f8>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	615a      	str	r2, [r3, #20]
        /* The USBTRD is configured according to the tables below, depending on AHB frequency 
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        if((hclk >= 14200000)&&(hclk < 15000000))
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4a7b      	ldr	r2, [pc, #492]	; (8001f60 <HAL_PCD_IRQHandler+0x7a8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d90c      	bls.n	8001d90 <HAL_PCD_IRQHandler+0x5d8>
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <HAL_PCD_IRQHandler+0x7ac>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d808      	bhi.n	8001d90 <HAL_PCD_IRQHandler+0x5d8>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	68d2      	ldr	r2, [r2, #12]
 8001d88:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	e08f      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x6f8>
        }
        
        else if((hclk >= 15000000)&&(hclk < 16000000))
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4a74      	ldr	r2, [pc, #464]	; (8001f64 <HAL_PCD_IRQHandler+0x7ac>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d90c      	bls.n	8001db2 <HAL_PCD_IRQHandler+0x5fa>
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4a73      	ldr	r2, [pc, #460]	; (8001f68 <HAL_PCD_IRQHandler+0x7b0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d808      	bhi.n	8001db2 <HAL_PCD_IRQHandler+0x5fa>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	68d2      	ldr	r2, [r2, #12]
 8001daa:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	e07e      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x6f8>
        }
        
        else if((hclk >= 16000000)&&(hclk < 17200000))
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4a6c      	ldr	r2, [pc, #432]	; (8001f68 <HAL_PCD_IRQHandler+0x7b0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d90c      	bls.n	8001dd4 <HAL_PCD_IRQHandler+0x61c>
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4a6b      	ldr	r2, [pc, #428]	; (8001f6c <HAL_PCD_IRQHandler+0x7b4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d808      	bhi.n	8001dd4 <HAL_PCD_IRQHandler+0x61c>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	68d2      	ldr	r2, [r2, #12]
 8001dcc:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	e06d      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x6f8>
        }
        
        else if((hclk >= 17200000)&&(hclk < 18500000))
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4a65      	ldr	r2, [pc, #404]	; (8001f6c <HAL_PCD_IRQHandler+0x7b4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d90c      	bls.n	8001df6 <HAL_PCD_IRQHandler+0x63e>
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4a64      	ldr	r2, [pc, #400]	; (8001f70 <HAL_PCD_IRQHandler+0x7b8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d808      	bhi.n	8001df6 <HAL_PCD_IRQHandler+0x63e>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	68d2      	ldr	r2, [r2, #12]
 8001dee:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001df2:	60da      	str	r2, [r3, #12]
 8001df4:	e05c      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x6f8>
        }
        
        else if((hclk >= 18500000)&&(hclk < 20000000))
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4a5d      	ldr	r2, [pc, #372]	; (8001f70 <HAL_PCD_IRQHandler+0x7b8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d90c      	bls.n	8001e18 <HAL_PCD_IRQHandler+0x660>
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_PCD_IRQHandler+0x7bc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d808      	bhi.n	8001e18 <HAL_PCD_IRQHandler+0x660>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	68d2      	ldr	r2, [r2, #12]
 8001e10:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	e04b      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x6f8>
        }
        
        else if((hclk >= 20000000)&&(hclk < 21800000))
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4a56      	ldr	r2, [pc, #344]	; (8001f74 <HAL_PCD_IRQHandler+0x7bc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d90c      	bls.n	8001e3a <HAL_PCD_IRQHandler+0x682>
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4a55      	ldr	r2, [pc, #340]	; (8001f78 <HAL_PCD_IRQHandler+0x7c0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d808      	bhi.n	8001e3a <HAL_PCD_IRQHandler+0x682>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	68d2      	ldr	r2, [r2, #12]
 8001e32:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	e03a      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x6f8>
        }
        
        else if((hclk >= 21800000)&&(hclk < 24000000))
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4a4e      	ldr	r2, [pc, #312]	; (8001f78 <HAL_PCD_IRQHandler+0x7c0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d90c      	bls.n	8001e5c <HAL_PCD_IRQHandler+0x6a4>
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4a4d      	ldr	r2, [pc, #308]	; (8001f7c <HAL_PCD_IRQHandler+0x7c4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d808      	bhi.n	8001e5c <HAL_PCD_IRQHandler+0x6a4>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	68d2      	ldr	r2, [r2, #12]
 8001e54:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	e029      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x6f8>
        }
        
        else if((hclk >= 24000000)&&(hclk < 27700000))
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4a47      	ldr	r2, [pc, #284]	; (8001f7c <HAL_PCD_IRQHandler+0x7c4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d90c      	bls.n	8001e7e <HAL_PCD_IRQHandler+0x6c6>
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4a46      	ldr	r2, [pc, #280]	; (8001f80 <HAL_PCD_IRQHandler+0x7c8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d808      	bhi.n	8001e7e <HAL_PCD_IRQHandler+0x6c6>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	68d2      	ldr	r2, [r2, #12]
 8001e76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	e018      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x6f8>
        }
        
        else if((hclk >= 27700000)&&(hclk < 32000000))
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4a3f      	ldr	r2, [pc, #252]	; (8001f80 <HAL_PCD_IRQHandler+0x7c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d90c      	bls.n	8001ea0 <HAL_PCD_IRQHandler+0x6e8>
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <HAL_PCD_IRQHandler+0x7cc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d808      	bhi.n	8001ea0 <HAL_PCD_IRQHandler+0x6e8>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	68d2      	ldr	r2, [r2, #12]
 8001e98:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	e007      	b.n	8001eb0 <HAL_PCD_IRQHandler+0x6f8>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	68d2      	ldr	r2, [r2, #12]
 8001eaa:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8001eae:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7fe fe68 	bl	8000b86 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	6952      	ldr	r2, [r2, #20]
 8001ec0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fb0c 	bl	80054e8 <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d175      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x80e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	6992      	ldr	r2, [r2, #24]
 8001ee4:	f022 0210 	bic.w	r2, r2, #16
 8001ee8:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 020f 	and.w	r2, r3, #15
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	0c5b      	lsrs	r3, r3, #17
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d139      	bne.n	8001f88 <HAL_PCD_IRQHandler+0x7d0>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d04a      	beq.n	8001fb6 <HAL_PCD_IRQHandler+0x7fe>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	68d9      	ldr	r1, [r3, #12]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	6a38      	ldr	r0, [r7, #32]
 8001f34:	f003 f9ad 	bl	8005292 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f44:	441a      	add	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f56:	441a      	add	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	619a      	str	r2, [r3, #24]
 8001f5c:	e02b      	b.n	8001fb6 <HAL_PCD_IRQHandler+0x7fe>
 8001f5e:	bf00      	nop
 8001f60:	00d8acbf 	.word	0x00d8acbf
 8001f64:	00e4e1bf 	.word	0x00e4e1bf
 8001f68:	00f423ff 	.word	0x00f423ff
 8001f6c:	0106737f 	.word	0x0106737f
 8001f70:	011a499f 	.word	0x011a499f
 8001f74:	01312cff 	.word	0x01312cff
 8001f78:	014ca43f 	.word	0x014ca43f
 8001f7c:	016e35ff 	.word	0x016e35ff
 8001f80:	01a6ab1f 	.word	0x01a6ab1f
 8001f84:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	0c5b      	lsrs	r3, r3, #17
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d110      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x7fe>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6a38      	ldr	r0, [r7, #32]
 8001fa0:	f003 f977 	bl	8005292 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fb0:	441a      	add	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	6992      	ldr	r2, [r2, #24]
 8001fc0:	f042 0210 	orr.w	r2, r2, #16
 8001fc4:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 fa8c 	bl	80054e8 <USB_ReadInterrupts>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x838>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fdc5 	bl	8000b6a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	6952      	ldr	r2, [r2, #20]
 8001fea:	f002 0208 	and.w	r2, r2, #8
 8001fee:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fa77 	bl	80054e8 <USB_ReadInterrupts>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002004:	d10d      	bne.n	8002022 <HAL_PCD_IRQHandler+0x86a>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7fe fe2b 	bl	8000c68 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	6952      	ldr	r2, [r2, #20]
 800201c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002020:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fa5e 	bl	80054e8 <USB_ReadInterrupts>
 800202c:	4603      	mov	r3, r0
 800202e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002036:	d10d      	bne.n	8002054 <HAL_PCD_IRQHandler+0x89c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4619      	mov	r1, r3
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fe00 	bl	8000c44 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	6952      	ldr	r2, [r2, #20]
 800204e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002052:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f003 fa45 	bl	80054e8 <USB_ReadInterrupts>
 800205e:	4603      	mov	r3, r0
 8002060:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002068:	d10a      	bne.n	8002080 <HAL_PCD_IRQHandler+0x8c8>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fe0e 	bl	8000c8c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	6952      	ldr	r2, [r2, #20]
 800207a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800207e:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fa2f 	bl	80054e8 <USB_ReadInterrupts>
 800208a:	4603      	mov	r3, r0
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b04      	cmp	r3, #4
 8002092:	d115      	bne.n	80020c0 <HAL_PCD_IRQHandler+0x908>
    {
      temp = hpcd->Instance->GOTGINT;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <HAL_PCD_IRQHandler+0x8f4>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fdfe 	bl	8000ca8 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	6851      	ldr	r1, [r2, #4]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	e000      	b.n	80020c0 <HAL_PCD_IRQHandler+0x908>
      return;
 80020be:	bf00      	nop
    }
  }
}
 80020c0:	3730      	adds	r7, #48	; 0x30
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop

080020c8 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_PCD_SetAddress+0x1a>
 80020de:	2302      	movs	r3, #2
 80020e0:	e00f      	b.n	8002102 <HAL_PCD_SetAddress+0x3a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 f9d2 	bl	800549c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	4608      	mov	r0, r1
 8002114:	4611      	mov	r1, r2
 8002116:	461a      	mov	r2, r3
 8002118:	4603      	mov	r3, r0
 800211a:	70fb      	strb	r3, [r7, #3]
 800211c:	460b      	mov	r3, r1
 800211e:	803b      	strh	r3, [r7, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8002128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212c:	2b00      	cmp	r3, #0
 800212e:	da0b      	bge.n	8002148 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	3338      	adds	r3, #56	; 0x38
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	e00b      	b.n	8002160 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800216c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	09db      	lsrs	r3, r3, #7
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800217c:	883a      	ldrh	r2, [r7, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	78ba      	ldrb	r2, [r7, #2]
 8002186:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 800219a:	78bb      	ldrb	r3, [r7, #2]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d102      	bne.n	80021a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_PCD_EP_Open+0xaa>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e00e      	b.n	80021d2 <HAL_PCD_EP_Open+0xc8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68f9      	ldr	r1, [r7, #12]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 fc07 	bl	80049d6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 80021d0:	7afb      	ldrb	r3, [r7, #11]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	460b      	mov	r3, r1
 80021e8:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80021ea:	7afb      	ldrb	r3, [r7, #11]
 80021ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2200      	movs	r2, #0
 8002218:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800221a:	7afb      	ldrb	r3, [r7, #11]
 800221c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002220:	b2da      	uxtb	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	611a      	str	r2, [r3, #16]
  }
  
  __HAL_LOCK(hpcd); 
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_PCD_EP_Receive+0x68>
 800223e:	2302      	movs	r3, #2
 8002240:	e020      	b.n	8002284 <HAL_PCD_EP_Receive+0xaa>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  if ((ep_addr & 0x7FU) == 0U)
 800224a:	7afb      	ldrb	r3, [r7, #11]
 800224c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_PCD_EP_Receive+0x8e>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	6979      	ldr	r1, [r7, #20]
 8002262:	f002 fe83 	bl	8004f6c <USB_EP0StartXfer>
 8002266:	e008      	b.n	800227a <HAL_PCD_EP_Receive+0xa0>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	6979      	ldr	r1, [r7, #20]
 8002276:	f002 fc37 	bl	8004ae8 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd); 
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	460b      	mov	r3, r1
 800229a:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	3338      	adds	r3, #56	; 0x38
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2201      	movs	r2, #1
 80022c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d102      	bne.n	80022e4 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	611a      	str	r2, [r3, #16]
  }
  
  __HAL_LOCK(hpcd); 
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_PCD_EP_Transmit+0x66>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e020      	b.n	8002334 <HAL_PCD_EP_Transmit+0xa8>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  if ((ep_addr & 0x7FU) == 0U)
 80022fa:	7afb      	ldrb	r3, [r7, #11]
 80022fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_PCD_EP_Transmit+0x8c>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6979      	ldr	r1, [r7, #20]
 8002312:	f002 fe2b 	bl	8004f6c <USB_EP0StartXfer>
 8002316:	e008      	b.n	800232a <HAL_PCD_EP_Transmit+0x9e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	6979      	ldr	r1, [r7, #20]
 8002326:	f002 fbdf 	bl	8004ae8 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
     
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8002348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da0b      	bge.n	8002368 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	3338      	adds	r3, #56	; 0x38
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	e009      	b.n	800237c <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800238e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	09db      	lsrs	r3, r3, #7
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_PCD_EP_SetStall+0x70>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e01e      	b.n	80023ea <HAL_PCD_EP_SetStall+0xae>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68f9      	ldr	r1, [r7, #12]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 ff90 	bl	80052e0 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	b2d9      	uxtb	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80023da:	461a      	mov	r2, r3
 80023dc:	f003 f953 	bl	8005686 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 80023fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da0b      	bge.n	800241e <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3338      	adds	r3, #56	; 0x38
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e009      	b.n	8002432 <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800243e:	b2da      	uxtb	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	09db      	lsrs	r3, r3, #7
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_PCD_EP_ClrStall+0x70>
 800245e:	2302      	movs	r3, #2
 8002460:	e00e      	b.n	8002480 <HAL_PCD_EP_ClrStall+0x8e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68f9      	ldr	r1, [r7, #12]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 ffa6 	bl	80053c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd: PCD handle
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af02      	add	r7, sp, #8
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	3338      	adds	r3, #56	; 0x38
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d202      	bcs.n	80024ce <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3303      	adds	r3, #3
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80024d6:	e02b      	b.n	8002530 <PCD_WriteEmptyTxFifo+0xa8>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0U)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d202      	bcs.n	80024f4 <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	3303      	adds	r3, #3
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68d9      	ldr	r1, [r3, #12]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	b298      	uxth	r0, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	4603      	mov	r3, r0
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f002 fe88 	bl	8005228 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	441a      	add	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	441a      	add	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	b29a      	uxth	r2, r3
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	429a      	cmp	r2, r3
 8002544:	d909      	bls.n	800255a <PCD_WriteEmptyTxFifo+0xd2>
          ep->xfer_count < ep->xfer_len &&
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800254e:	429a      	cmp	r2, r3
 8002550:	d203      	bcs.n	800255a <PCD_WriteEmptyTxFifo+0xd2>
            ep->xfer_len != 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1be      	bne.n	80024d8 <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d110      	bne.n	8002582 <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 8002560:	2201      	movs	r2, #1
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002570:	4619      	mov	r1, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	43db      	mvns	r3, r3
 800257e:	4013      	ands	r3, r2
 8002580:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3720      	adds	r7, #32
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08e      	sub	sp, #56	; 0x38
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8002594:	2300      	movs	r3, #0
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d075      	beq.n	8002690 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a4:	4ba4      	ldr	r3, [pc, #656]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d00c      	beq.n	80025ca <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b0:	4ba1      	ldr	r3, [pc, #644]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d112      	bne.n	80025e2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025bc:	4b9e      	ldr	r3, [pc, #632]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c8:	d10b      	bne.n	80025e2 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ca:	4b9b      	ldr	r3, [pc, #620]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d05b      	beq.n	800268e <HAL_RCC_OscConfig+0x102>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d157      	bne.n	800268e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e224      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x6e>
 80025ec:	4a92      	ldr	r2, [pc, #584]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	4b92      	ldr	r3, [pc, #584]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e01d      	b.n	8002636 <HAL_RCC_OscConfig+0xaa>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002602:	d10c      	bne.n	800261e <HAL_RCC_OscConfig+0x92>
 8002604:	4a8c      	ldr	r2, [pc, #560]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002606:	4b8c      	ldr	r3, [pc, #560]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4a89      	ldr	r2, [pc, #548]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002612:	4b89      	ldr	r3, [pc, #548]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e00b      	b.n	8002636 <HAL_RCC_OscConfig+0xaa>
 800261e:	4a86      	ldr	r2, [pc, #536]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	4b85      	ldr	r3, [pc, #532]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4a83      	ldr	r2, [pc, #524]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d013      	beq.n	8002666 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe fd93 	bl	8001168 <HAL_GetTick>
 8002642:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002646:	f7fe fd8f 	bl	8001168 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b64      	cmp	r3, #100	; 0x64
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1e9      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002658:	4b77      	ldr	r3, [pc, #476]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0xba>
 8002664:	e014      	b.n	8002690 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fd7f 	bl	8001168 <HAL_GetTick>
 800266a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266e:	f7fe fd7b 	bl	8001168 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b64      	cmp	r3, #100	; 0x64
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1d5      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002680:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0xe2>
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d077      	beq.n	800278c <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269c:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00b      	beq.n	80026c0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a8:	4b63      	ldr	r3, [pc, #396]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d126      	bne.n	8002702 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b4:	4b60      	ldr	r3, [pc, #384]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d120      	bne.n	8002702 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c0:	4b5d      	ldr	r3, [pc, #372]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x14c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e1a9      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4857      	ldr	r0, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026da:	4b57      	ldr	r3, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	23f8      	movs	r3, #248	; 0xf8
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	4313      	orrs	r3, r2
 80026fe:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002700:	e044      	b.n	800278c <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d02a      	beq.n	8002760 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270a:	4b4c      	ldr	r3, [pc, #304]	; (800283c <HAL_RCC_OscConfig+0x2b0>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fd2a 	bl	8001168 <HAL_GetTick>
 8002714:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002718:	f7fe fd26 	bl	8001168 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e180      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b43      	ldr	r3, [pc, #268]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4840      	ldr	r0, [pc, #256]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6919      	ldr	r1, [r3, #16]
 8002744:	23f8      	movs	r3, #248	; 0xf8
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	6003      	str	r3, [r0, #0]
 800275e:	e015      	b.n	800278c <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002760:	4b36      	ldr	r3, [pc, #216]	; (800283c <HAL_RCC_OscConfig+0x2b0>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe fcff 	bl	8001168 <HAL_GetTick>
 800276a:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe fcfb 	bl	8001168 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e155      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d030      	beq.n	80027fa <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d016      	beq.n	80027ce <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_OscConfig+0x2b4>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fe fcdf 	bl	8001168 <HAL_GetTick>
 80027aa:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ae:	f7fe fcdb 	bl	8001168 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e135      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x222>
 80027cc:	e015      	b.n	80027fa <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_RCC_OscConfig+0x2b4>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe fcc8 	bl	8001168 <HAL_GetTick>
 80027d8:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027dc:	f7fe fcc4 	bl	8001168 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e11e      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8086 	beq.w	8002914 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002808:	2300      	movs	r3, #0
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002816:	6413      	str	r3, [r2, #64]	; 0x40
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <HAL_RCC_OscConfig+0x2ac>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <HAL_RCC_OscConfig+0x2b8>)
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <HAL_RCC_OscConfig+0x2b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282e:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8002830:	f7fe fc9a 	bl	8001168 <HAL_GetTick>
 8002834:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002836:	e010      	b.n	800285a <HAL_RCC_OscConfig+0x2ce>
 8002838:	40023800 	.word	0x40023800
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
 8002844:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7fe fc8e 	bl	8001168 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e0e8      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800285a:	4b76      	ldr	r3, [pc, #472]	; (8002a34 <HAL_RCC_OscConfig+0x4a8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x2f0>
 800286e:	4a72      	ldr	r2, [pc, #456]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 8002870:	4b71      	ldr	r3, [pc, #452]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6713      	str	r3, [r2, #112]	; 0x70
 800287a:	e01c      	b.n	80028b6 <HAL_RCC_OscConfig+0x32a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d10c      	bne.n	800289e <HAL_RCC_OscConfig+0x312>
 8002884:	4a6c      	ldr	r2, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 8002886:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6713      	str	r3, [r2, #112]	; 0x70
 8002890:	4a69      	ldr	r2, [pc, #420]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 8002892:	4b69      	ldr	r3, [pc, #420]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6713      	str	r3, [r2, #112]	; 0x70
 800289c:	e00b      	b.n	80028b6 <HAL_RCC_OscConfig+0x32a>
 800289e:	4a66      	ldr	r2, [pc, #408]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 80028a0:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6713      	str	r3, [r2, #112]	; 0x70
 80028aa:	4a63      	ldr	r2, [pc, #396]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 80028ac:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d015      	beq.n	80028ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028be:	f7fe fc53 	bl	8001168 <HAL_GetTick>
 80028c2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe fc4f 	bl	8001168 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e0a7      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ee      	beq.n	80028c6 <HAL_RCC_OscConfig+0x33a>
 80028e8:	e014      	b.n	8002914 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7fe fc3d 	bl	8001168 <HAL_GetTick>
 80028ee:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe fc39 	bl	8001168 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e091      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002908:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ee      	bne.n	80028f2 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8086 	beq.w	8002a2a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800291e:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b08      	cmp	r3, #8
 8002928:	d07d      	beq.n	8002a26 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d162      	bne.n	80029f8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b42      	ldr	r3, [pc, #264]	; (8002a3c <HAL_RCC_OscConfig+0x4b0>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fc16 	bl	8001168 <HAL_GetTick>
 800293c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fc12 	bl	8001168 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e06c      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800295e:	4836      	ldr	r0, [pc, #216]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800296e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	60fb      	str	r3, [r7, #12]
  return(result);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	1e59      	subs	r1, r3, #1
 8002990:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002994:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	617b      	str	r3, [r7, #20]
  return(result);
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ae:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80029b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	4313      	orrs	r3, r2
 80029c8:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_RCC_OscConfig+0x4b0>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fbca 	bl	8001168 <HAL_GetTick>
 80029d4:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe fbc6 	bl	8001168 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e020      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x44c>
 80029f6:	e018      	b.n	8002a2a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f8:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_RCC_OscConfig+0x4b0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7fe fbb3 	bl	8001168 <HAL_GetTick>
 8002a02:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a06:	f7fe fbaf 	bl	8001168 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e009      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <HAL_RCC_OscConfig+0x4ac>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x47a>
 8002a24:	e001      	b.n	8002a2a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3738      	adds	r7, #56	; 0x38
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40007000 	.word	0x40007000
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470060 	.word	0x42470060

08002a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002a4e:	4b81      	ldr	r3, [pc, #516]	; (8002c54 <HAL_RCC_ClockConfig+0x214>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d20c      	bcs.n	8002a76 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5c:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <HAL_RCC_ClockConfig+0x214>)
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a64:	4b7b      	ldr	r3, [pc, #492]	; (8002c54 <HAL_RCC_ClockConfig+0x214>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 020f 	and.w	r2, r3, #15
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0ea      	b.n	8002c4c <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a82:	4975      	ldr	r1, [pc, #468]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002a84:	4b74      	ldr	r3, [pc, #464]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8086 	beq.w	8002bae <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b6b      	ldr	r3, [pc, #428]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d119      	bne.n	8002aea <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0c8      	b.n	8002c4c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0b8      	b.n	8002c4c <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b5f      	ldr	r3, [pc, #380]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0b0      	b.n	8002c4c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	495b      	ldr	r1, [pc, #364]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002aec:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 0203 	bic.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afc:	f7fe fb34 	bl	8001168 <HAL_GetTick>
 8002b00:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d112      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7fe fb2c 	bl	8001168 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e094      	b.n	8002c4c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b22:	4b4d      	ldr	r3, [pc, #308]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d1ee      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xcc>
 8002b2e:	e03e      	b.n	8002bae <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d112      	bne.n	8002b5e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3a:	f7fe fb15 	bl	8001168 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e07d      	b.n	8002c4c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b50:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d1ee      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xfa>
 8002b5c:	e027      	b.n	8002bae <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d11d      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b68:	f7fe fafe 	bl	8001168 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e066      	b.n	8002c4c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002b7e:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d1ee      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x128>
 8002b8a:	e010      	b.n	8002bae <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe faec 	bl	8001168 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e054      	b.n	8002c4c <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ee      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002bae:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <HAL_RCC_ClockConfig+0x214>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 020f 	and.w	r2, r3, #15
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d90c      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbc:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_RCC_ClockConfig+0x214>)
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_RCC_ClockConfig+0x214>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e03a      	b.n	8002c4c <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be2:	491d      	ldr	r1, [pc, #116]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c00:	4915      	ldr	r1, [pc, #84]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002c14:	f000 f826 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002c18:	4601      	mov	r1, r0
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <HAL_RCC_ClockConfig+0x218>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c22:	23f0      	movs	r3, #240	; 0xf0
 8002c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
 8002c38:	4a08      	ldr	r2, [pc, #32]	; (8002c5c <HAL_RCC_ClockConfig+0x21c>)
 8002c3a:	5cd3      	ldrb	r3, [r2, r3]
 8002c3c:	fa21 f303 	lsr.w	r3, r1, r3
 8002c40:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_RCC_ClockConfig+0x220>)
 8002c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c44:	200f      	movs	r0, #15
 8002c46:	f7fe fa65 	bl	8001114 <HAL_InitTick>
  
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023c00 	.word	0x40023c00
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	080066ec 	.word	0x080066ec
 8002c60:	20000008 	.word	0x20000008

08002c64 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b08b      	sub	sp, #44	; 0x2c
 8002c68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d006      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x30>
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d007      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x36>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d158      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c8e:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c90:	623b      	str	r3, [r7, #32]
       break;
 8002c92:	e058      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c96:	623b      	str	r3, [r7, #32]
      break;
 8002c98:	e055      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c9a:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca2:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d017      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002cb0:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb8:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002cc6:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	6979      	ldr	r1, [r7, #20]
 8002cca:	fa91 f1a1 	rbit	r1, r1
 8002cce:	6139      	str	r1, [r7, #16]
  return(result);
 8002cd0:	6939      	ldr	r1, [r7, #16]
 8002cd2:	fab1 f181 	clz	r1, r1
 8002cd6:	40cb      	lsrs	r3, r1
 8002cd8:	fb03 f302 	mul.w	r3, r3, r2
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	e016      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8002cf6:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	68f9      	ldr	r1, [r7, #12]
 8002cfa:	fa91 f1a1 	rbit	r1, r1
 8002cfe:	60b9      	str	r1, [r7, #8]
  return(result);
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	fab1 f181 	clz	r1, r1
 8002d06:	40cb      	lsrs	r3, r1
 8002d08:	fb03 f302 	mul.w	r3, r3, r2
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d16:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002d1a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	603b      	str	r3, [r7, #0]
  return(result);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8002d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	623b      	str	r3, [r7, #32]
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002d42:	623b      	str	r3, [r7, #32]
      break;
 8002d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	372c      	adds	r7, #44	; 0x2c
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40023800 	.word	0x40023800
 8002d58:	00f42400 	.word	0x00f42400

08002d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000008 	.word	0x20000008

08002d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002d7a:	f7ff ffef 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d7e:	4601      	mov	r1, r0
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8002d88:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d8c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	603b      	str	r3, [r7, #0]
  return(result);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
 8002da4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	080066ec 	.word	0x080066ec

08002db8 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	; 0x30
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_SPI_TransmitReceive+0x32>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e181      	b.n	80030ee <HAL_SPI_TransmitReceive+0x336>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002df2:	f7fe f9b9 	bl	8001168 <HAL_GetTick>
 8002df6:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d00e      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x74>
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e14:	d106      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_SPI_TransmitReceive+0x6c>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d003      	beq.n	8002e2c <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002e2a:	e156      	b.n	80030da <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_SPI_TransmitReceive+0x86>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <HAL_SPI_TransmitReceive+0x86>
 8002e38:	887b      	ldrh	r3, [r7, #2]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002e44:	e149      	b.n	80030da <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d103      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2205      	movs	r2, #5
 8002e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	887a      	ldrh	r2, [r7, #2]
 8002e82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d007      	beq.n	8002eae <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb6:	d171      	bne.n	8002f9c <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <HAL_SPI_TransmitReceive+0x112>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d15d      	bne.n	8002f86 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	8812      	ldrh	r2, [r2, #0]
 8002ed2:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ee8:	e04d      	b.n	8002f86 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01c      	beq.n	8002f2a <HAL_SPI_TransmitReceive+0x172>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d017      	beq.n	8002f2a <HAL_SPI_TransmitReceive+0x172>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d110      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	8812      	ldrh	r2, [r2, #0]
 8002f10:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3302      	adds	r3, #2
 8002f16:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d018      	beq.n	8002f66 <HAL_SPI_TransmitReceive+0x1ae>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d111      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3302      	adds	r3, #2
 8002f52:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002f62:	2301      	movs	r3, #1
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d00b      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x1ce>
 8002f6e:	f7fe f8fb 	bl	8001168 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad2      	subs	r2, r2, r3
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d303      	bcc.n	8002f86 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f84:	e0a9      	b.n	80030da <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ac      	bne.n	8002eea <HAL_SPI_TransmitReceive+0x132>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1a7      	bne.n	8002eea <HAL_SPI_TransmitReceive+0x132>
 8002f9a:	e071      	b.n	8003080 <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d004      	beq.n	8002fae <HAL_SPI_TransmitReceive+0x1f6>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d15e      	bne.n	800306c <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	330c      	adds	r3, #12
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	7812      	ldrb	r2, [r2, #0]
 8002fb8:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fce:	e04d      	b.n	800306c <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01d      	beq.n	8003012 <HAL_SPI_TransmitReceive+0x25a>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d018      	beq.n	8003012 <HAL_SPI_TransmitReceive+0x25a>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d111      	bne.n	8003012 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f103 020c 	add.w	r2, r3, #12
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1c59      	adds	r1, r3, #1
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d017      	beq.n	800304c <HAL_SPI_TransmitReceive+0x294>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d110      	bne.n	800304c <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	68d2      	ldr	r2, [r2, #12]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8003048:	2301      	movs	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d00b      	beq.n	800306c <HAL_SPI_TransmitReceive+0x2b4>
 8003054:	f7fe f888 	bl	8001168 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	1ad2      	subs	r2, r2, r3
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	429a      	cmp	r2, r3
 8003062:	d303      	bcc.n	800306c <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800306a:	e036      	b.n	80030da <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ac      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x218>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1a7      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	2201      	movs	r2, #1
 8003088:	2102      	movs	r1, #2
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f92a 	bl	80032e4 <SPI_WaitFlagStateUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800309c:	e01d      	b.n	80030da <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f987 	bl	80033b6 <SPI_CheckFlag_BSY>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030ba:	e00e      	b.n	80030da <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10e      	bne.n	8003138 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8003120:	2b00      	cmp	r3, #0
 8003122:	d009      	beq.n	8003138 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
    return;
 8003136:	e0b1      	b.n	800329c <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_SPI_IRQHandler+0x5e>
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
    return;
 8003154:	e0a2      	b.n	800329c <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f403 73b0 	and.w	r3, r3, #352	; 0x160
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 809d 	beq.w	800329c <HAL_SPI_IRQHandler+0x1a4>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8097 	beq.w	800329c <HAL_SPI_IRQHandler+0x1a4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d023      	beq.n	80031c0 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b03      	cmp	r3, #3
 8003182:	d011      	beq.n	80031a8 <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	e00b      	b.n	80031c0 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]
        return;
 80031be:	e06d      	b.n	800329c <HAL_SPI_IRQHandler+0x1a4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d014      	beq.n	80031f4 <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00c      	beq.n	8003218 <HAL_SPI_IRQHandler+0x120>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f043 0208 	orr.w	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	2b00      	cmp	r3, #0
 800321e:	d03c      	beq.n	800329a <HAL_SPI_IRQHandler+0x1a2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	6852      	ldr	r2, [r2, #4]
 800322a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800322e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d104      	bne.n	800324c <HAL_SPI_IRQHandler+0x154>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d022      	beq.n	8003292 <HAL_SPI_IRQHandler+0x19a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	6852      	ldr	r2, [r2, #4]
 8003256:	f022 0203 	bic.w	r2, r2, #3
 800325a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_SPI_IRQHandler+0x17e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003268:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <HAL_SPI_IRQHandler+0x1ac>)
 800326a:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe f8b3 	bl	80013dc <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00c      	beq.n	8003298 <HAL_SPI_IRQHandler+0x1a0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003282:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <HAL_SPI_IRQHandler+0x1ac>)
 8003284:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe f8a6 	bl	80013dc <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8003290:	e002      	b.n	8003298 <HAL_SPI_IRQHandler+0x1a0>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f808 	bl	80032a8 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8003298:	bf00      	nop
 800329a:	bf00      	nop
  }
}
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	080032bd 	.word	0x080032bd

080032a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff ffe6 	bl	80032a8 <HAL_SPI_ErrorCallback>
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80032f2:	e04d      	b.n	8003390 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d049      	beq.n	8003390 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003302:	f7fd ff31 	bl	8001168 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	1ad2      	subs	r2, r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d33e      	bcc.n	8003390 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	6852      	ldr	r2, [r2, #4]
 800331c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003320:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800332a:	d111      	bne.n	8003350 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003334:	d004      	beq.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d107      	bne.n	8003350 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003358:	d110      	bne.n	800337c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003368:	400b      	ands	r3, r1
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800337a:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e00e      	b.n	80033ae <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	401a      	ands	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	d101      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80033a0:	2201      	movs	r2, #1
 80033a2:	e000      	b.n	80033a6 <SPI_WaitFlagStateUntilTimeout+0xc2>
 80033a4:	2200      	movs	r2, #0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1a3      	bne.n	80032f4 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af02      	add	r7, sp, #8
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2200      	movs	r2, #0
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ff89 	bl	80032e4 <SPI_WaitFlagStateUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e000      	b.n	80033ea <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e01d      	b.n	8003440 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7fd fa6b 	bl	80008f4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f000 fbf3 	bl	8003c1c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	68d2      	ldr	r2, [r2, #12]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e01d      	b.n	80034cc <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f815 	bl	80034d4 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	4619      	mov	r1, r3
 80034bc:	4610      	mov	r0, r2
 80034be:	f000 fbad 	bl	8003c1c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}  
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_PWM_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIM_IC_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e01d      	b.n	8003536 <HAL_TIM_IC_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 

  if(htim->State == HAL_TIM_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_TIM_IC_Init+0x2c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f815 	bl	800353e <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f000 fb78 	bl	8003c1c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_TIM_IC_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b02      	cmp	r3, #2
 8003566:	d122      	bne.n	80035ae <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d11b      	bne.n	80035ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0202 	mvn.w	r2, #2
 800357e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fd f91b 	bl	80007d0 <HAL_TIM_IC_CaptureCallback>
 800359a:	e005      	b.n	80035a8 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb1e 	bl	8003bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fb25 	bl	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d122      	bne.n	8003602 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d11b      	bne.n	8003602 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0204 	mvn.w	r2, #4
 80035d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7fd f8f1 	bl	80007d0 <HAL_TIM_IC_CaptureCallback>
 80035ee:	e005      	b.n	80035fc <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 faf4 	bl	8003bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fafb 	bl	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d122      	bne.n	8003656 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b08      	cmp	r3, #8
 800361c:	d11b      	bne.n	8003656 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f06f 0208 	mvn.w	r2, #8
 8003626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2204      	movs	r2, #4
 800362c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7fd f8c7 	bl	80007d0 <HAL_TIM_IC_CaptureCallback>
 8003642:	e005      	b.n	8003650 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 faca 	bl	8003bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fad1 	bl	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b10      	cmp	r3, #16
 8003662:	d122      	bne.n	80036aa <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b10      	cmp	r3, #16
 8003670:	d11b      	bne.n	80036aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0210 	mvn.w	r2, #16
 800367a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2208      	movs	r2, #8
 8003680:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7fd f89d 	bl	80007d0 <HAL_TIM_IC_CaptureCallback>
 8003696:	e005      	b.n	80036a4 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 faa0 	bl	8003bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 faa7 	bl	8003bf2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d10e      	bne.n	80036d6 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f06f 0201 	mvn.w	r2, #1
 80036ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7fd f83f 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d10e      	bne.n	8003702 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b80      	cmp	r3, #128	; 0x80
 80036f0:	d107      	bne.n	8003702 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fed3 	bl	80044a8 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d10e      	bne.n	800372e <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d107      	bne.n	800372e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003726:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fa6c 	bl	8003c06 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b20      	cmp	r3, #32
 800373a:	d10e      	bne.n	800375a <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b20      	cmp	r3, #32
 8003748:	d107      	bne.n	800375a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f06f 0220 	mvn.w	r2, #32
 8003752:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fe9d 	bl	8004494 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIM_IC_ConfigChannel+0x1a>
 8003778:	2302      	movs	r3, #2
 800377a:	e08a      	b.n	8003892 <HAL_TIM_IC_ConfigChannel+0x130>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  if (Channel == TIM_CHANNEL_1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d11b      	bne.n	80037ca <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f000 fabf 	bl	8003d24 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	6992      	ldr	r2, [r2, #24]
 80037b0:	f022 020c 	bic.w	r2, r2, #12
 80037b4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	6991      	ldr	r1, [r2, #24]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	619a      	str	r2, [r3, #24]
 80037c8:	e05a      	b.n	8003880 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d11c      	bne.n	800380a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
    TIM_TI2_SetConfig(htim->Instance, 
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6819      	ldr	r1, [r3, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f000 fcdb 	bl	800419a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	6992      	ldr	r2, [r2, #24]
 80037ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037f2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	6991      	ldr	r1, [r2, #24]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	6892      	ldr	r2, [r2, #8]
 8003802:	0212      	lsls	r2, r2, #8
 8003804:	430a      	orrs	r2, r1
 8003806:	619a      	str	r2, [r3, #24]
 8003808:	e03a      	b.n	8003880 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
    
    TIM_TI3_SetConfig(htim->Instance,  
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f000 fd30 	bl	8004284 <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	69d2      	ldr	r2, [r2, #28]
 800382e:	f022 020c 	bic.w	r2, r2, #12
 8003832:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	69d1      	ldr	r1, [r2, #28]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	6892      	ldr	r2, [r2, #8]
 8003842:	430a      	orrs	r2, r1
 8003844:	61da      	str	r2, [r3, #28]
 8003846:	e01b      	b.n	8003880 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
    
    TIM_TI4_SetConfig(htim->Instance, 
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6819      	ldr	r1, [r3, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f000 fd54 	bl	8004304 <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	69d2      	ldr	r2, [r2, #28]
 8003866:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800386a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	69d1      	ldr	r1, [r2, #28]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	0212      	lsls	r2, r2, #8
 800387c:	430a      	orrs	r2, r1
 800387e:	61da      	str	r2, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e0b4      	b.n	8003a20 <HAL_TIM_PWM_ConfigChannel+0x184>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b0c      	cmp	r3, #12
 80038ca:	f200 809f 	bhi.w	8003a0c <HAL_TIM_PWM_ConfigChannel+0x170>
 80038ce:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	08003909 	.word	0x08003909
 80038d8:	08003a0d 	.word	0x08003a0d
 80038dc:	08003a0d 	.word	0x08003a0d
 80038e0:	08003a0d 	.word	0x08003a0d
 80038e4:	08003949 	.word	0x08003949
 80038e8:	08003a0d 	.word	0x08003a0d
 80038ec:	08003a0d 	.word	0x08003a0d
 80038f0:	08003a0d 	.word	0x08003a0d
 80038f4:	0800398b 	.word	0x0800398b
 80038f8:	08003a0d 	.word	0x08003a0d
 80038fc:	08003a0d 	.word	0x08003a0d
 8003900:	08003a0d 	.word	0x08003a0d
 8003904:	080039cb 	.word	0x080039cb
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fae6 	bl	8003ee0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	6992      	ldr	r2, [r2, #24]
 800391e:	f042 0208 	orr.w	r2, r2, #8
 8003922:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	6992      	ldr	r2, [r2, #24]
 800392e:	f022 0204 	bic.w	r2, r2, #4
 8003932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	6991      	ldr	r1, [r2, #24]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	6912      	ldr	r2, [r2, #16]
 8003942:	430a      	orrs	r2, r1
 8003944:	619a      	str	r2, [r3, #24]
    }
    break;
 8003946:	e062      	b.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fa58 	bl	8003e04 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	6992      	ldr	r2, [r2, #24]
 800395e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003962:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	6992      	ldr	r2, [r2, #24]
 800396e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	6991      	ldr	r1, [r2, #24]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	6912      	ldr	r2, [r2, #16]
 8003982:	0212      	lsls	r2, r2, #8
 8003984:	430a      	orrs	r2, r1
 8003986:	619a      	str	r2, [r3, #24]
    }
    break;
 8003988:	e041      	b.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fb0d 	bl	8003fb0 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	69d2      	ldr	r2, [r2, #28]
 80039a0:	f042 0208 	orr.w	r2, r2, #8
 80039a4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	69d2      	ldr	r2, [r2, #28]
 80039b0:	f022 0204 	bic.w	r2, r2, #4
 80039b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	69d1      	ldr	r1, [r2, #28]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	6912      	ldr	r2, [r2, #16]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	61da      	str	r2, [r3, #28]
    }
    break;
 80039c8:	e021      	b.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fb59 	bl	8004088 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	69d2      	ldr	r2, [r2, #28]
 80039e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039e4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	69d2      	ldr	r2, [r2, #28]
 80039f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	69d1      	ldr	r1, [r2, #28]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	6912      	ldr	r2, [r2, #16]
 8003a04:	0212      	lsls	r2, r2, #8
 8003a06:	430a      	orrs	r2, r1
 8003a08:	61da      	str	r2, [r3, #28]
    }
    break;
 8003a0a:	e000      	b.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8003a0c:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIM_ConfigClockSource+0x1c>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0c8      	b.n	8003bd6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d077      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0x144>
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d80e      	bhi.n	8003a9e <HAL_TIM_ConfigClockSource+0x76>
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	f000 808a 	beq.w	8003b9a <HAL_TIM_ConfigClockSource+0x172>
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d802      	bhi.n	8003a90 <HAL_TIM_ConfigClockSource+0x68>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d07e      	beq.n	8003b8c <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8003a8e:	e099      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	f000 8089 	beq.w	8003ba8 <HAL_TIM_ConfigClockSource+0x180>
 8003a96:	2b30      	cmp	r3, #48	; 0x30
 8003a98:	f000 808d 	beq.w	8003bb6 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8003a9c:	e092      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003a9e:	2b70      	cmp	r3, #112	; 0x70
 8003aa0:	d016      	beq.n	8003ad0 <HAL_TIM_ConfigClockSource+0xa8>
 8003aa2:	2b70      	cmp	r3, #112	; 0x70
 8003aa4:	d804      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x88>
 8003aa6:	2b50      	cmp	r3, #80	; 0x50
 8003aa8:	d040      	beq.n	8003b2c <HAL_TIM_ConfigClockSource+0x104>
 8003aaa:	2b60      	cmp	r3, #96	; 0x60
 8003aac:	d04e      	beq.n	8003b4c <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8003aae:	e089      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x96>
 8003ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aba:	d024      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8003abc:	e082      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	f022 0207 	bic.w	r2, r2, #7
 8003acc:	609a      	str	r2, [r3, #8]
    break;
 8003ace:	e079      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6899      	ldr	r1, [r3, #8]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f000 fc71 	bl	80043c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003af2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003afa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	609a      	str	r2, [r3, #8]
    break;
 8003b04:	e05e      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6899      	ldr	r1, [r3, #8]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f000 fc56 	bl	80043c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	6892      	ldr	r2, [r2, #8]
 8003b24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b28:	609a      	str	r2, [r3, #8]
    break;
 8003b2a:	e04b      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f000 fafb 	bl	8004134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2150      	movs	r1, #80	; 0x50
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fc1e 	bl	8004386 <TIM_ITRx_SetConfig>
    break;
 8003b4a:	e03b      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f000 fb5f 	bl	800421c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2160      	movs	r1, #96	; 0x60
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fc0e 	bl	8004386 <TIM_ITRx_SetConfig>
    break;
 8003b6a:	e02b      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f000 fadb 	bl	8004134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2140      	movs	r1, #64	; 0x40
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fbfe 	bl	8004386 <TIM_ITRx_SetConfig>
    break;
 8003b8a:	e01b      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fbf7 	bl	8004386 <TIM_ITRx_SetConfig>
    break;
 8003b98:	e014      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2110      	movs	r1, #16
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fbf0 	bl	8004386 <TIM_ITRx_SetConfig>
    break;
 8003ba6:	e00d      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2120      	movs	r1, #32
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fbe9 	bl	8004386 <TIM_ITRx_SetConfig>
    break;
 8003bb4:	e006      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2130      	movs	r1, #48	; 0x30
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fbe2 	bl	8004386 <TIM_ITRx_SetConfig>
    break;
 8003bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a35      	ldr	r2, [pc, #212]	; (8003d08 <TIM_Base_SetConfig+0xec>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00f      	beq.n	8003c58 <TIM_Base_SetConfig+0x3c>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3e:	d00b      	beq.n	8003c58 <TIM_Base_SetConfig+0x3c>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a32      	ldr	r2, [pc, #200]	; (8003d0c <TIM_Base_SetConfig+0xf0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <TIM_Base_SetConfig+0x3c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a31      	ldr	r2, [pc, #196]	; (8003d10 <TIM_Base_SetConfig+0xf4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_Base_SetConfig+0x3c>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a30      	ldr	r2, [pc, #192]	; (8003d14 <TIM_Base_SetConfig+0xf8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <TIM_Base_SetConfig+0x40>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <TIM_Base_SetConfig+0x42>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a24      	ldr	r2, [pc, #144]	; (8003d08 <TIM_Base_SetConfig+0xec>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d01b      	beq.n	8003cb4 <TIM_Base_SetConfig+0x98>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d017      	beq.n	8003cb4 <TIM_Base_SetConfig+0x98>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a21      	ldr	r2, [pc, #132]	; (8003d0c <TIM_Base_SetConfig+0xf0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <TIM_Base_SetConfig+0x98>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <TIM_Base_SetConfig+0xf4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00f      	beq.n	8003cb4 <TIM_Base_SetConfig+0x98>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <TIM_Base_SetConfig+0xf8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00b      	beq.n	8003cb4 <TIM_Base_SetConfig+0x98>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <TIM_Base_SetConfig+0xfc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <TIM_Base_SetConfig+0x98>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <TIM_Base_SetConfig+0x100>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_Base_SetConfig+0x98>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <TIM_Base_SetConfig+0x104>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d101      	bne.n	8003cb8 <TIM_Base_SetConfig+0x9c>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <TIM_Base_SetConfig+0x9e>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a07      	ldr	r2, [pc, #28]	; (8003d08 <TIM_Base_SetConfig+0xec>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d103      	bne.n	8003cf6 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	615a      	str	r2, [r3, #20]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_TI1_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f023 0201 	bic.w	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <TIM_TI1_SetConfig+0xcc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d013      	beq.n	8003d82 <TIM_TI1_SetConfig+0x5e>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d00f      	beq.n	8003d82 <TIM_TI1_SetConfig+0x5e>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <TIM_TI1_SetConfig+0xd0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00b      	beq.n	8003d82 <TIM_TI1_SetConfig+0x5e>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <TIM_TI1_SetConfig+0xd4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <TIM_TI1_SetConfig+0x5e>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <TIM_TI1_SetConfig+0xd8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d003      	beq.n	8003d82 <TIM_TI1_SetConfig+0x5e>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a20      	ldr	r2, [pc, #128]	; (8003e00 <TIM_TI1_SetConfig+0xdc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <TIM_TI1_SetConfig+0x62>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <TIM_TI1_SetConfig+0x64>
 8003d86:	2300      	movs	r3, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e007      	b.n	8003dae <TIM_TI1_SetConfig+0x8a>
  } 
  else
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 0303 	bic.w	r3, r3, #3
 8003da4:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f023 030a 	bic.w	r3, r3, #10
 8003dc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f003 030a 	and.w	r3, r3, #10
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800
 8003dfc:	40000c00 	.word	0x40000c00
 8003e00:	40014000 	.word	0x40014000

08003e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f023 0210 	bic.w	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e46:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0320 	bic.w	r3, r3, #32
 8003e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <TIM_OC2_SetConfig+0xd8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d121      	bne.n	8003eb4 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8a:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40010000 	.word	0x40010000

08003ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f023 0201 	bic.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f023 0302 	bic.w	r3, r3, #2
 8003f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <TIM_OC1_SetConfig+0xcc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d11e      	bne.n	8003f86 <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 0308 	bic.w	r3, r3, #8
 8003f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	621a      	str	r2, [r3, #32]
} 
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40010000 	.word	0x40010000

08003fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <TIM_OC3_SetConfig+0xd4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d121      	bne.n	800405e <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004034:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800403c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	621a      	str	r2, [r3, #32]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40010000 	.word	0x40010000

08004088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ca:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040de:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	031b      	lsls	r3, r3, #12
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a10      	ldr	r2, [pc, #64]	; (8004130 <TIM_OC4_SetConfig+0xa8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d109      	bne.n	8004108 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000

08004134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0201 	bic.w	r2, r3, #1
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f023 030a 	bic.w	r3, r3, #10
 8004178:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <TIM_TI2_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800419a:	b480      	push	{r7}
 800419c:	b087      	sub	sp, #28
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f023 0210 	bic.w	r2, r3, #16
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	613b      	str	r3, [r7, #16]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	031b      	lsls	r3, r3, #12
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	621a      	str	r2, [r3, #32]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f023 0210 	bic.w	r2, r3, #16
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800424e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	031b      	lsls	r3, r3, #12
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	621a      	str	r2, [r3, #32]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_TI3_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f023 0303 	bic.w	r3, r3, #3
 80042b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80042dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004338:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800434a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	031b      	lsls	r3, r3, #12
 8004350:	b29b      	uxth	r3, r3
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800435e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	031b      	lsls	r3, r3, #12
 8004364:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	460b      	mov	r3, r1
 8004390:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	f043 0307 	orr.w	r3, r3, #7
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	609a      	str	r2, [r3, #8]
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	021a      	lsls	r2, r3, #8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	609a      	str	r2, [r3, #8]
} 
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800441e:	2302      	movs	r3, #2
 8004420:	e032      	b.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	6852      	ldr	r2, [r2, #4]
 800443c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004440:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	6851      	ldr	r1, [r2, #4]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	6892      	ldr	r2, [r2, #8]
 800445e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004462:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	6891      	ldr	r1, [r2, #8]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	6852      	ldr	r2, [r2, #4]
 8004472:	430a      	orrs	r2, r1
 8004474:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
} 
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_UART_IRQHandler+0x52>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f991 	bl	800482e <UART_Receive_IT>
      return;
 800450c:	e0cc      	b.n	80046a8 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80ab 	beq.w	800466c <HAL_UART_IRQHandler+0x1b0>
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <HAL_UART_IRQHandler+0x70>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 80a0 	beq.w	800466c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_UART_IRQHandler+0x90>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	f043 0201 	orr.w	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_UART_IRQHandler+0xb0>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	f043 0202 	orr.w	r2, r3, #2
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_UART_IRQHandler+0xd0>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004584:	f043 0204 	orr.w	r2, r3, #4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_UART_IRQHandler+0xf0>
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	f043 0208 	orr.w	r2, r3, #8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d078      	beq.n	80046a6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_UART_IRQHandler+0x112>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f930 	bl	800482e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <HAL_UART_IRQHandler+0x13a>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d031      	beq.n	800465a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f87a 	bl	80046f0 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d023      	beq.n	8004652 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	6952      	ldr	r2, [r2, #20]
 8004614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004618:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	2b00      	cmp	r3, #0
 8004620:	d013      	beq.n	800464a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <HAL_UART_IRQHandler+0x1f4>)
 8004628:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	4618      	mov	r0, r3
 8004630:	f7fc fed4 	bl	80013dc <HAL_DMA_Abort_IT>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d016      	beq.n	8004668 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004644:	4610      	mov	r0, r2
 8004646:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	e00e      	b.n	8004668 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f846 	bl	80046dc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	e00a      	b.n	8004668 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f842 	bl	80046dc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	e006      	b.n	8004668 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f83e 	bl	80046dc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004666:	e01e      	b.n	80046a6 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	bf00      	nop
    return;
 800466a:	e01c      	b.n	80046a6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_UART_IRQHandler+0x1cc>
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f867 	bl	8004754 <UART_Transmit_IT>
    return;
 8004686:	e00f      	b.n	80046a8 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_UART_IRQHandler+0x1ec>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f8ae 	bl	80047fe <UART_EndTransmit_IT>
    return;
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80046a6:	bf00      	nop
  }
}
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	0800472d 	.word	0x0800472d

080046b4 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	68d2      	ldr	r2, [r2, #12]
 8004702:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004706:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	6952      	ldr	r2, [r2, #20]
 8004712:	f022 0201 	bic.w	r2, r2, #1
 8004716:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff ffc8 	bl	80046dc <HAL_UART_ErrorCallback>
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b21      	cmp	r3, #33	; 0x21
 8004766:	d143      	bne.n	80047f0 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004770:	d119      	bne.n	80047a6 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	8812      	ldrh	r2, [r2, #0]
 8004780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004784:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	621a      	str	r2, [r3, #32]
 8004798:	e00e      	b.n	80047b8 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	621a      	str	r2, [r3, #32]
 80047a4:	e008      	b.n	80047b8 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	1c58      	adds	r0, r3, #1
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	6208      	str	r0, [r1, #32]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4619      	mov	r1, r3
 80047c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10f      	bne.n	80047ec <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	68d2      	ldr	r2, [r2, #12]
 80047d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	68d2      	ldr	r2, [r2, #12]
 80047e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	68d2      	ldr	r2, [r2, #12]
 8004810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004814:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ff48 	bl	80046b4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b22      	cmp	r3, #34	; 0x22
 8004840:	d169      	bne.n	8004916 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	d123      	bne.n	8004894 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10e      	bne.n	8004878 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	629a      	str	r2, [r3, #40]	; 0x28
 8004876:	e029      	b.n	80048cc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	b29b      	uxth	r3, r3
 8004880:	b2db      	uxtb	r3, r3
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	629a      	str	r2, [r3, #40]	; 0x28
 8004892:	e01b      	b.n	80048cc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	1c59      	adds	r1, r3, #1
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6291      	str	r1, [r2, #40]	; 0x28
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	6852      	ldr	r2, [r2, #4]
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	e00c      	b.n	80048cc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	1c59      	adds	r1, r3, #1
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6291      	str	r1, [r2, #40]	; 0x28
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	6852      	ldr	r2, [r2, #4]
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4619      	mov	r1, r3
 80048da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d118      	bne.n	8004912 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	68d2      	ldr	r2, [r2, #12]
 80048ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	6952      	ldr	r2, [r2, #20]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff fedd 	bl	80046c8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e002      	b.n	8004918 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	019b      	lsls	r3, r3, #6
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	611a      	str	r2, [r3, #16]
 
  do
  {
    if (++count > 200000U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <USB_FlushTxFifo+0x48>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e006      	b.n	800495a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b20      	cmp	r3, #32
 8004956:	d0f0      	beq.n	800493a <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	00030d40 	.word	0x00030d40

0800496c <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0306 	and.w	r3, r3, #6
 8004984:	2b00      	cmp	r3, #0
 8004986:	d102      	bne.n	800498e <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]
 800498c:	e01c      	b.n	80049c8 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0306 	and.w	r3, r3, #6
 800499a:	2b02      	cmp	r3, #2
 800499c:	d007      	beq.n	80049ae <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80049aa:	2b06      	cmp	r3, #6
 80049ac:	d102      	bne.n	80049b4 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 80049ae:	2303      	movs	r3, #3
 80049b0:	73fb      	strb	r3, [r7, #15]
 80049b2:	e009      	b.n	80049c8 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0306 	and.w	r3, r3, #6
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d101      	bne.n	80049c8 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 80049c4:	2302      	movs	r3, #2
 80049c6:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d13e      	bne.n	8004a66 <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ee:	4619      	mov	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	2301      	movs	r3, #1
 8004a00:	4083      	lsls	r3, r0
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d15c      	bne.n	8004ada <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	4618      	mov	r0, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	78c9      	ldrb	r1, [r1, #3]
 8004a4c:	0489      	lsls	r1, r1, #18
 8004a4e:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 8004a50:	6839      	ldr	r1, [r7, #0]
 8004a52:	7809      	ldrb	r1, [r1, #0]
 8004a54:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8004a56:	430b      	orrs	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a62:	6003      	str	r3, [r0, #0]
 8004a64:	e039      	b.n	8004ada <USB_ActivateEndpoint+0x104>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	4083      	lsls	r3, r0
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d11d      	bne.n	8004ada <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aac:	4618      	mov	r0, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ac6:	6839      	ldr	r1, [r7, #0]
 8004ac8:	78c9      	ldrb	r1, [r1, #3]
 8004aca:	0489      	lsls	r1, r1, #18
 8004acc:	430b      	orrs	r3, r1
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad8:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4613      	mov	r3, r2
 8004af4:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	f040 8146 	bne.w	8004d90 <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d13b      	bne.n	8004b84 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b34:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	4619      	mov	r1, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	0cdb      	lsrs	r3, r3, #19
 8004b7e:	04db      	lsls	r3, r3, #19
 8004b80:	610b      	str	r3, [r1, #16]
 8004b82:	e086      	b.n	8004c92 <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b92:	4619      	mov	r1, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	0cdb      	lsrs	r3, r3, #19
 8004ba6:	04db      	lsls	r3, r3, #19
 8004ba8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb8:	4619      	mov	r1, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be2:	4618      	mov	r0, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6959      	ldr	r1, [r3, #20]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	440b      	add	r3, r1
 8004bfe:	1e59      	subs	r1, r3, #1
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c08:	04d9      	lsls	r1, r3, #19
 8004c0a:	4b8c      	ldr	r3, [pc, #560]	; (8004e3c <USB_EPStartXfer+0x354>)
 8004c0c:	400b      	ands	r3, r1
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	4619      	mov	r1, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	78db      	ldrb	r3, [r3, #3]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d125      	bne.n	8004c92 <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	4619      	mov	r1, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c6a:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c90:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d10b      	bne.n	8004cb0 <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	6153      	str	r3, [r2, #20]
 8004cae:	e016      	b.n	8004cde <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	78db      	ldrb	r3, [r3, #3]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d012      	beq.n	8004cde <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00e      	beq.n	8004cde <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4083      	lsls	r3, r0
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	78db      	ldrb	r3, [r3, #3]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d12e      	bne.n	8004d44 <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d113      	bne.n	8004d1e <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d04:	4619      	mov	r1, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d1a:	600b      	str	r3, [r1, #0]
 8004d1c:	e012      	b.n	8004d44 <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d42:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	4619      	mov	r1, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d68:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	78db      	ldrb	r3, [r3, #3]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	f040 80f5 	bne.w	8004f5e <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	68d9      	ldr	r1, [r3, #12]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	b298      	uxth	r0, r3
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4603      	mov	r3, r0
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fa4d 	bl	8005228 <USB_WritePacket>
 8004d8e:	e0e6      	b.n	8004f5e <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	4619      	mov	r1, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	0cdb      	lsrs	r3, r3, #19
 8004db2:	04db      	lsls	r3, r3, #19
 8004db4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dde:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d12b      	bne.n	8004e40 <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df6:	4619      	mov	r1, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e10:	4313      	orrs	r3, r2
 8004e12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	4619      	mov	r1, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e38:	610b      	str	r3, [r1, #16]
 8004e3a:	e03c      	b.n	8004eb6 <USB_EPStartXfer+0x3ce>
 8004e3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4413      	add	r3, r2
 8004e4a:	1e5a      	subs	r2, r3, #1
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	4619      	mov	r1, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	8afb      	ldrh	r3, [r7, #22]
 8004e78:	04db      	lsls	r3, r3, #19
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	4b3a      	ldr	r3, [pc, #232]	; (8004f68 <USB_EPStartXfer+0x480>)
 8004e7e:	4003      	ands	r3, r0
 8004e80:	4313      	orrs	r3, r2
 8004e82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e92:	4618      	mov	r0, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	8af9      	ldrh	r1, [r7, #22]
 8004eaa:	fb01 f303 	mul.w	r3, r1, r3
 8004eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d10a      	bne.n	8004ed2 <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	78db      	ldrb	r3, [r3, #3]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d12e      	bne.n	8004f38 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d113      	bne.n	8004f12 <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	4619      	mov	r1, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f0e:	600b      	str	r3, [r1, #0]
 8004f10:	e012      	b.n	8004f38 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	4619      	mov	r1, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f36:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f46:	4619      	mov	r1, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f5c:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	1ff80000 	.word	0x1ff80000

08004f6c <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	f040 80d1 	bne.w	8005126 <USB_EP0StartXfer+0x1ba>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d13b      	bne.n	8005004 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fb4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fda:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fea:	4619      	mov	r1, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	0cdb      	lsrs	r3, r3, #19
 8004ffe:	04db      	lsls	r3, r3, #19
 8005000:	610b      	str	r3, [r1, #16]
 8005002:	e05a      	b.n	80050ba <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	4619      	mov	r1, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	0cdb      	lsrs	r3, r3, #19
 8005026:	04db      	lsls	r3, r3, #19
 8005028:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005038:	4619      	mov	r1, r3
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800504e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005052:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	d903      	bls.n	8005068 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005076:	4619      	mov	r1, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800508c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	4619      	mov	r1, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b6:	4313      	orrs	r3, r2
 80050b8:	610b      	str	r3, [r1, #16]
    
    }
    
    if (dma == 1)
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d10b      	bne.n	80050d8 <USB_EP0StartXfer+0x16c>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	461a      	mov	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	6153      	str	r3, [r2, #20]
 80050d6:	e012      	b.n	80050fe <USB_EP0StartXfer+0x192>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <USB_EP0StartXfer+0x192>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	4619      	mov	r1, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	2301      	movs	r3, #1
 80050f8:	4083      	lsls	r3, r0
 80050fa:	4313      	orrs	r3, r2
 80050fc:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	4619      	mov	r1, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005122:	600b      	str	r3, [r1, #0]
 8005124:	e079      	b.n	800521a <USB_EP0StartXfer+0x2ae>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	4619      	mov	r1, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	0cdb      	lsrs	r3, r3, #19
 8005148:	04db      	lsls	r3, r3, #19
 800514a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	4619      	mov	r1, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005170:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005174:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <USB_EP0StartXfer+0x21a>
    {
      ep->xfer_len = ep->maxpacket;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	4619      	mov	r1, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051aa:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	4619      	mov	r1, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d4:	4313      	orrs	r3, r2
 80051d6:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d10a      	bne.n	80051f4 <USB_EP0StartXfer+0x288>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	461a      	mov	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	4619      	mov	r1, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005218:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4611      	mov	r1, r2
 8005234:	461a      	mov	r2, r3
 8005236:	460b      	mov	r3, r1
 8005238:	71fb      	strb	r3, [r7, #7]
 800523a:	4613      	mov	r3, r2
 800523c:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8005246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d11a      	bne.n	8005284 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 800524e:	88bb      	ldrh	r3, [r7, #4]
 8005250:	3303      	adds	r3, #3
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e00f      	b.n	800527c <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	031a      	lsls	r2, r3, #12
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005268:	461a      	mov	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3301      	adds	r3, #1
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	3304      	adds	r3, #4
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	429a      	cmp	r2, r3
 8005282:	d3eb      	bcc.n	800525c <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005292:	b480      	push	{r7}
 8005294:	b087      	sub	sp, #28
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	4613      	mov	r3, r2
 800529e:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	3303      	adds	r3, #3
 80052a8:	089b      	lsrs	r3, r3, #2
 80052aa:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	e00b      	b.n	80052ca <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	3301      	adds	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	3304      	adds	r3, #4
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d3ef      	bcc.n	80052b2 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 80052d2:	68bb      	ldr	r3, [r7, #8]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d130      	bne.n	8005354 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	db12      	blt.n	800532c <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	4619      	mov	r1, r3
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800532a:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533a:	4619      	mov	r1, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005350:	600b      	str	r3, [r1, #0]
 8005352:	e02f      	b.n	80053b4 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	db12      	blt.n	800538e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	4619      	mov	r1, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800538c:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539c:	4619      	mov	r1, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053b2:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d12e      	bne.n	8005432 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	4619      	mov	r1, r3
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053f8:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	78db      	ldrb	r3, [r3, #3]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d003      	beq.n	800540a <USB_EPClearStall+0x48>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	78db      	ldrb	r3, [r3, #3]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d141      	bne.n	800548e <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	4619      	mov	r1, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542e:	600b      	str	r3, [r1, #0]
 8005430:	e02d      	b.n	800548e <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	4619      	mov	r1, r3
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005456:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	78db      	ldrb	r3, [r3, #3]
 800545c:	2b03      	cmp	r3, #3
 800545e:	d003      	beq.n	8005468 <USB_EPClearStall+0xa6>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	78db      	ldrb	r3, [r3, #3]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d112      	bne.n	800548e <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	4619      	mov	r1, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548c:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054bc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c4:	4619      	mov	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80054d6:	4313      	orrs	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4013      	ands	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  return v;  
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4013      	ands	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	0c1b      	lsrs	r3, r3, #16
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8005542:	b480      	push	{r7}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4013      	ands	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	b29b      	uxth	r3, r3
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8005572:	b480      	push	{r7}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4013      	ands	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  return v;
 800559c:	68fb      	ldr	r3, [r7, #12]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	fa22 f303 	lsr.w	r3, r2, r3
 80055d2:	01db      	lsls	r3, r3, #7
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
  return v;
 80055f0:	68fb      	ldr	r3, [r7, #12]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f003 0301 	and.w	r3, r3, #1
}
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005628:	461a      	mov	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005636:	f023 0307 	bic.w	r3, r3, #7
 800563a:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0306 	and.w	r3, r3, #6
 8005648:	2b04      	cmp	r3, #4
 800564a:	d10a      	bne.n	8005662 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	461a      	mov	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f043 0303 	orr.w	r3, r3, #3
 8005660:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005676:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	460b      	mov	r3, r1
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	461a      	mov	r2, r3
 800569c:	2300      	movs	r3, #0
 800569e:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	461a      	mov	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	461a      	mov	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f043 0318 	orr.w	r3, r3, #24
 80056ca:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	461a      	mov	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056e0:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 80056e2:	7afb      	ldrb	r3, [r7, #11]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d10c      	bne.n	8005702 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	461a      	mov	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	461a      	mov	r2, r3
 80056fc:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8005700:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HCI_verify>:
 *
 * @param[in] hciReadPacket    The packet that is received from HCI interface.
 * @return 0 if HCI packet is as expected
 */
int HCI_verify(const tHciDataPacket * hciReadPacket)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3308      	adds	r3, #8
 800571c:	60fb      	str	r3, [r7, #12]
  
  if(hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b04      	cmp	r3, #4
 8005724:	d001      	beq.n	800572a <HCI_verify+0x1a>
    return 1;  /* Incorrect type. */
 8005726:	2301      	movs	r3, #1
 8005728:	e00c      	b.n	8005744 <HCI_verify+0x34>
  
  if(hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3302      	adds	r3, #2
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005738:	3b03      	subs	r3, #3
 800573a:	429a      	cmp	r2, r3
 800573c:	d001      	beq.n	8005742 <HCI_verify+0x32>
    return 2; /* Wrong length (packet truncated or too long). */
 800573e:	2302      	movs	r3, #2
 8005740:	e000      	b.n	8005744 <HCI_verify+0x34>
  
  return 0;      
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HCI_Isr>:
{
  return list_is_empty(&hciReadPktRxQueue);
}

void HCI_Isr(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	603b      	str	r3, [r7, #0]
  uint8_t data_len;
  
  Clear_SPI_EXTI_Flag();
 800575a:	f7fb fcad 	bl	80010b8 <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 800575e:	e038      	b.n	80057d2 <HCI_Isr+0x82>
    if (list_is_empty (&hciReadPktPool) == FALSE){
 8005760:	4820      	ldr	r0, [pc, #128]	; (80057e4 <HCI_Isr+0x94>)
 8005762:	f000 f845 	bl	80057f0 <list_is_empty>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d12d      	bne.n	80057c8 <HCI_Isr+0x78>
      
      /* enqueueing a packet for read */
      list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800576c:	463b      	mov	r3, r7
 800576e:	4619      	mov	r1, r3
 8005770:	481c      	ldr	r0, [pc, #112]	; (80057e4 <HCI_Isr+0x94>)
 8005772:	f000 f8c4 	bl	80058fe <list_remove_head>
      
      data_len = BlueNRG_SPI_Read_All(&SpiHandle, hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	4619      	mov	r1, r3
 800577e:	481a      	ldr	r0, [pc, #104]	; (80057e8 <HCI_Isr+0x98>)
 8005780:	f7fb fc24 	bl	8000fcc <BlueNRG_SPI_Read_All>
 8005784:	4603      	mov	r3, r0
 8005786:	71fb      	strb	r3, [r7, #7]
      if(data_len > 0){                    
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d016      	beq.n	80057bc <HCI_Isr+0x6c>
        hciReadPacket->data_len = data_len;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	79fa      	ldrb	r2, [r7, #7]
 8005792:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if(HCI_verify(hciReadPacket) == 0)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff ffb9 	bl	8005710 <HCI_verify>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <HCI_Isr+0x60>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	4619      	mov	r1, r3
 80057a8:	4810      	ldr	r0, [pc, #64]	; (80057ec <HCI_Isr+0x9c>)
 80057aa:	f000 f865 	bl	8005878 <list_insert_tail>
 80057ae:	e00e      	b.n	80057ce <HCI_Isr+0x7e>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	4619      	mov	r1, r3
 80057b4:	480b      	ldr	r0, [pc, #44]	; (80057e4 <HCI_Isr+0x94>)
 80057b6:	f000 f83b 	bl	8005830 <list_insert_head>
 80057ba:	e008      	b.n	80057ce <HCI_Isr+0x7e>
      }
      else {
        // Insert the packet back into the pool.
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	4808      	ldr	r0, [pc, #32]	; (80057e4 <HCI_Isr+0x94>)
 80057c2:	f000 f835 	bl	8005830 <list_insert_head>
 80057c6:	e002      	b.n	80057ce <HCI_Isr+0x7e>
      }
      
    }
    else{
      // HCI Read Packet Pool is empty, wait for a free packet.
      Clear_SPI_EXTI_Flag();
 80057c8:	f7fb fc76 	bl	80010b8 <Clear_SPI_EXTI_Flag>
 80057cc:	e006      	b.n	80057dc <HCI_Isr+0x8c>
      return;
    }
    
    Clear_SPI_EXTI_Flag();
 80057ce:	f7fb fc73 	bl	80010b8 <Clear_SPI_EXTI_Flag>
  while(BlueNRG_DataPresent()){        
 80057d2:	f7fb fbeb 	bl	8000fac <BlueNRG_DataPresent>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1c1      	bne.n	8005760 <HCI_Isr+0x10>
  }
}
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	200008b0 	.word	0x200008b0
 80057e8:	20000854 	.word	0x20000854
 80057ec:	200008b8 	.word	0x200008b8

080057f0 <list_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;	
}

uint8_t list_is_empty (tListNode * listHead)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057f8:	f3ef 8310 	mrs	r3, PRIMASK
 80057fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80057fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uint8_t return_value;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005800:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005802:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d102      	bne.n	8005814 <list_is_empty+0x24>
  {
    return_value = TRUE;
 800580e:	2301      	movs	r3, #1
 8005810:	75fb      	strb	r3, [r7, #23]
 8005812:	e001      	b.n	8005818 <list_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8005814:	2300      	movs	r3, #0
 8005816:	75fb      	strb	r3, [r7, #23]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8005822:	7dfb      	ldrb	r3, [r7, #23]
}
 8005824:	4618      	mov	r0, r3
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800583a:	f3ef 8310 	mrs	r3, PRIMASK
 800583e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005840:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005842:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005844:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	605a      	str	r2, [r3, #4]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800586c:	bf00      	nop
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005882:	f3ef 8310 	mrs	r3, PRIMASK
 8005886:	60fb      	str	r3, [r7, #12]
  return(result);
 8005888:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800588a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800588c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80058c8:	f3ef 8310 	mrs	r3, PRIMASK
 80058cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80058ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80058d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80058d2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6812      	ldr	r2, [r2, #0]
 80058dc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6852      	ldr	r2, [r2, #4]
 80058e6:	605a      	str	r2, [r3, #4]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005908:	f3ef 8310 	mrs	r3, PRIMASK
 800590c:	60fb      	str	r3, [r7, #12]
  return(result);
 800590e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;

  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005912:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff ffcd 	bl	80058c0 <list_remove_node>
  (*node)->next = NULL;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005940:	bf00      	nop
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800596a:	2302      	movs	r3, #2
 800596c:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00c      	beq.n	8005992 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	78fa      	ldrb	r2, [r7, #3]
 8005982:	4611      	mov	r1, r2
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	4611      	mov	r1, r2
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
  return USBD_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fd98 	bl	800650a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80059e8:	461a      	mov	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d00b      	beq.n	8005a16 <USBD_LL_SetupStage+0x54>
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d011      	beq.n	8005a26 <USBD_LL_SetupStage+0x64>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d117      	bne.n	8005a36 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9c6 	bl	8005da0 <USBD_StdDevReq>
    break;
 8005a14:	e01a      	b.n	8005a4c <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa0e 	bl	8005e40 <USBD_StdItfReq>
    break;
 8005a24:	e012      	b.n	8005a4c <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa39 	bl	8005ea6 <USBD_StdEPReq>
    break;
 8005a34:	e00a      	b.n	8005a4c <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005a3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fb f957 	bl	8000cf8 <USBD_LL_StallEP>
    break;
 8005a4a:	bf00      	nop
  }  
  return USBD_OK;  
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8005a64:	7afb      	ldrb	r3, [r7, #11]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d138      	bne.n	8005adc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005a70:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d142      	bne.n	8005b02 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d914      	bls.n	8005ab2 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	1ad2      	subs	r2, r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	bf28      	it	cs
 8005aa2:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fda9 	bl	8006602 <USBD_CtlContinueRx>
 8005ab0:	e027      	b.n	8005b02 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d105      	bne.n	8005ad4 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fda6 	bl	8006626 <USBD_CtlSendStatus>
 8005ada:	e012      	b.n	8005b02 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00c      	beq.n	8005b02 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d107      	bne.n	8005b02 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	7afa      	ldrb	r2, [r7, #11]
 8005afc:	4611      	mov	r1, r2
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	4798      	blx	r3
  }  
  return USBD_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	460b      	mov	r3, r1
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8005b1a:	7afb      	ldrb	r3, [r7, #11]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d16c      	bne.n	8005bfa <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3314      	adds	r3, #20
 8005b24:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d157      	bne.n	8005be0 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d915      	bls.n	8005b68 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fd42 	bl	80065de <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2100      	movs	r1, #0
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7fb f945 	bl	8000df0 <USBD_LL_PrepareReceive>
 8005b66:	e03b      	b.n	8005be0 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	68d2      	ldr	r2, [r2, #12]
 8005b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b74:	fb02 f201 	mul.w	r2, r2, r1
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11c      	bne.n	8005bb8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d316      	bcc.n	8005bb8 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d20f      	bcs.n	8005bb8 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fd1e 	bl	80065de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005baa:	2300      	movs	r3, #0
 8005bac:	2200      	movs	r2, #0
 8005bae:	2100      	movs	r1, #0
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7fb f91d 	bl	8000df0 <USBD_LL_PrepareReceive>
 8005bb6:	e013      	b.n	8005be0 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d105      	bne.n	8005bda <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fd36 	bl	800664c <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d11a      	bne.n	8005c20 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff feac 	bl	8005948 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8005bf8:	e012      	b.n	8005c20 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00c      	beq.n	8005c20 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d107      	bne.n	8005c20 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	7afa      	ldrb	r2, [r7, #11]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	4798      	blx	r3
  }  
  return USBD_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005c32:	2340      	movs	r3, #64	; 0x40
 8005c34:	2200      	movs	r2, #0
 8005c36:	2100      	movs	r1, #0
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fb f843 	bl	8000cc4 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2240      	movs	r2, #64	; 0x40
 8005c42:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005c46:	2340      	movs	r3, #64	; 0x40
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2180      	movs	r1, #128	; 0x80
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fb f839 	bl	8000cc4 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2240      	movs	r2, #64	; 0x40
 8005c56:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6852      	ldr	r2, [r2, #4]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	4611      	mov	r1, r2
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
 
  
  return USBD_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d10b      	bne.n	8005d1e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6852      	ldr	r2, [r2, #4]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	4611      	mov	r1, r2
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	4798      	blx	r3
   
  return USBD_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	2b09      	cmp	r3, #9
 8005db4:	d839      	bhi.n	8005e2a <USBD_StdDevReq+0x8a>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <USBD_StdDevReq+0x1c>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005e21 	.word	0x08005e21
 8005dc4:	08005e2b 	.word	0x08005e2b
 8005dc8:	08005e17 	.word	0x08005e17
 8005dcc:	08005e2b 	.word	0x08005e2b
 8005dd0:	08005def 	.word	0x08005def
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005e2b 	.word	0x08005e2b
 8005ddc:	08005e03 	.word	0x08005e03
 8005de0:	08005df9 	.word	0x08005df9
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f936 	bl	8006058 <USBD_GetDescriptor>
    break;
 8005dec:	e022      	b.n	8005e34 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fa25 	bl	8006240 <USBD_SetAddress>
    break;
 8005df6:	e01d      	b.n	8005e34 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa5e 	bl	80062bc <USBD_SetConfig>
    break;
 8005e00:	e018      	b.n	8005e34 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fae1 	bl	80063cc <USBD_GetConfig>
    break;
 8005e0a:	e013      	b.n	8005e34 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fb0e 	bl	8006430 <USBD_GetStatus>
    break;
 8005e14:	e00e      	b.n	8005e34 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fb33 	bl	8006484 <USBD_SetFeature>
    break;
 8005e1e:	e009      	b.n	8005e34 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fb49 	bl	80064ba <USBD_ClrFeature>
    break;
 8005e28:	e004      	b.n	8005e34 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fba9 	bl	8006584 <USBD_CtlError>
    break;
 8005e32:	bf00      	nop
  }
  
  return ret;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop

08005e40 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d11b      	bne.n	8005e90 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	889b      	ldrh	r3, [r3, #4]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d811      	bhi.n	8005e86 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	88db      	ldrh	r3, [r3, #6]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d110      	bne.n	8005e9a <USBD_StdItfReq+0x5a>
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fbd1 	bl	8006626 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005e84:	e009      	b.n	8005e9a <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fb7b 	bl	8006584 <USBD_CtlError>
    break;
 8005e8e:	e004      	b.n	8005e9a <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fb76 	bl	8006584 <USBD_CtlError>
    break;
 8005e98:	e000      	b.n	8005e9c <USBD_StdItfReq+0x5c>
    break;
 8005e9a:	bf00      	nop
  }
  return USBD_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	889b      	ldrh	r3, [r3, #4]
 8005eb8:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d108      	bne.n	8005ed8 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
    
    return USBD_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e0ba      	b.n	800604e <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d039      	beq.n	8005f54 <USBD_StdEPReq+0xae>
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d002      	beq.n	8005eea <USBD_StdEPReq+0x44>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d06b      	beq.n	8005fc0 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8005ee8:	e0b0      	b.n	800604c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d002      	beq.n	8005efa <USBD_StdEPReq+0x54>
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d00c      	beq.n	8005f12 <USBD_StdEPReq+0x6c>
 8005ef8:	e025      	b.n	8005f46 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d027      	beq.n	8005f50 <USBD_StdEPReq+0xaa>
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b80      	cmp	r3, #128	; 0x80
 8005f04:	d024      	beq.n	8005f50 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fa fef4 	bl	8000cf8 <USBD_LL_StallEP>
      break;	
 8005f10:	e01e      	b.n	8005f50 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	885b      	ldrh	r3, [r3, #2]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005f1a:	7bbb      	ldrb	r3, [r7, #14]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <USBD_StdEPReq+0x8a>
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	2b80      	cmp	r3, #128	; 0x80
 8005f24:	d004      	beq.n	8005f30 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fa fee4 	bl	8000cf8 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fb71 	bl	8006626 <USBD_CtlSendStatus>
      break;
 8005f44:	e005      	b.n	8005f52 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8005f46:	6839      	ldr	r1, [r7, #0]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fb1b 	bl	8006584 <USBD_CtlError>
      break;    
 8005f4e:	e000      	b.n	8005f52 <USBD_StdEPReq+0xac>
      break;	
 8005f50:	bf00      	nop
    break;
 8005f52:	e07b      	b.n	800604c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d002      	beq.n	8005f64 <USBD_StdEPReq+0xbe>
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d00c      	beq.n	8005f7c <USBD_StdEPReq+0xd6>
 8005f62:	e024      	b.n	8005fae <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005f64:	7bbb      	ldrb	r3, [r7, #14]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d026      	beq.n	8005fb8 <USBD_StdEPReq+0x112>
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	2b80      	cmp	r3, #128	; 0x80
 8005f6e:	d023      	beq.n	8005fb8 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fa febf 	bl	8000cf8 <USBD_LL_StallEP>
      break;	
 8005f7a:	e01d      	b.n	8005fb8 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	885b      	ldrh	r3, [r3, #2]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11b      	bne.n	8005fbc <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8005f84:	7bbb      	ldrb	r3, [r7, #14]
 8005f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fa fec3 	bl	8000d1e <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fb3d 	bl	8006626 <USBD_CtlSendStatus>
      break;
 8005fac:	e006      	b.n	8005fbc <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fae7 	bl	8006584 <USBD_CtlError>
      break;    
 8005fb6:	e002      	b.n	8005fbe <USBD_StdEPReq+0x118>
      break;	
 8005fb8:	bf00      	nop
 8005fba:	e047      	b.n	800604c <USBD_StdEPReq+0x1a6>
      break;
 8005fbc:	bf00      	nop
    break;
 8005fbe:	e045      	b.n	800604c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d002      	beq.n	8005fd0 <USBD_StdEPReq+0x12a>
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d00b      	beq.n	8005fe6 <USBD_StdEPReq+0x140>
 8005fce:	e036      	b.n	800603e <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d036      	beq.n	8006048 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fa fe8a 	bl	8000cf8 <USBD_LL_StallEP>
      break;	
 8005fe4:	e030      	b.n	8006048 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005fe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	da08      	bge.n	8006000 <USBD_StdEPReq+0x15a>
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	e007      	b.n	8006010 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8006006:	3310      	adds	r3, #16
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	4413      	add	r3, r2
 800600e:	3304      	adds	r3, #4
 8006010:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006012:	7bbb      	ldrb	r3, [r7, #14]
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fa fe94 	bl	8000d44 <USBD_LL_IsStallEP>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e002      	b.n	8006030 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8006030:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8006032:	2202      	movs	r2, #2
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fab5 	bl	80065a6 <USBD_CtlSendData>
      break;
 800603c:	e005      	b.n	800604a <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fa9f 	bl	8006584 <USBD_CtlError>
      break;
 8006046:	e000      	b.n	800604a <USBD_StdEPReq+0x1a4>
      break;	
 8006048:	bf00      	nop
    break;
 800604a:	bf00      	nop
  }
  return ret;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	885b      	ldrh	r3, [r3, #2]
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	2b06      	cmp	r3, #6
 800606e:	f200 80c9 	bhi.w	8006204 <USBD_GetDescriptor+0x1ac>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <USBD_GetDescriptor+0x20>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006095 	.word	0x08006095
 800607c:	080060ad 	.word	0x080060ad
 8006080:	080060ed 	.word	0x080060ed
 8006084:	08006205 	.word	0x08006205
 8006088:	08006205 	.word	0x08006205
 800608c:	080061b1 	.word	0x080061b1
 8006090:	080061d7 	.word	0x080061d7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	7c12      	ldrb	r2, [r2, #16]
 80060a0:	f107 010a 	add.w	r1, r7, #10
 80060a4:	4610      	mov	r0, r2
 80060a6:	4798      	blx	r3
 80060a8:	60f8      	str	r0, [r7, #12]
    break;
 80060aa:	e0b0      	b.n	800620e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	7c1b      	ldrb	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10d      	bne.n	80060d0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	f107 020a 	add.w	r2, r7, #10
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
 80060c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3301      	adds	r3, #1
 80060ca:	2202      	movs	r2, #2
 80060cc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80060ce:	e09e      	b.n	800620e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	f107 020a 	add.w	r2, r7, #10
 80060dc:	4610      	mov	r0, r2
 80060de:	4798      	blx	r3
 80060e0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	2202      	movs	r2, #2
 80060e8:	701a      	strb	r2, [r3, #0]
    break;
 80060ea:	e090      	b.n	800620e <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	885b      	ldrh	r3, [r3, #2]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	d856      	bhi.n	80061a4 <USBD_GetDescriptor+0x14c>
 80060f6:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <USBD_GetDescriptor+0xa4>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006115 	.word	0x08006115
 8006100:	0800612d 	.word	0x0800612d
 8006104:	08006145 	.word	0x08006145
 8006108:	0800615d 	.word	0x0800615d
 800610c:	08006175 	.word	0x08006175
 8006110:	0800618d 	.word	0x0800618d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	7c12      	ldrb	r2, [r2, #16]
 8006120:	f107 010a 	add.w	r1, r7, #10
 8006124:	4610      	mov	r0, r2
 8006126:	4798      	blx	r3
 8006128:	60f8      	str	r0, [r7, #12]
      break;
 800612a:	e040      	b.n	80061ae <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	7c12      	ldrb	r2, [r2, #16]
 8006138:	f107 010a 	add.w	r1, r7, #10
 800613c:	4610      	mov	r0, r2
 800613e:	4798      	blx	r3
 8006140:	60f8      	str	r0, [r7, #12]
      break;
 8006142:	e034      	b.n	80061ae <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	7c12      	ldrb	r2, [r2, #16]
 8006150:	f107 010a 	add.w	r1, r7, #10
 8006154:	4610      	mov	r0, r2
 8006156:	4798      	blx	r3
 8006158:	60f8      	str	r0, [r7, #12]
      break;
 800615a:	e028      	b.n	80061ae <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	7c12      	ldrb	r2, [r2, #16]
 8006168:	f107 010a 	add.w	r1, r7, #10
 800616c:	4610      	mov	r0, r2
 800616e:	4798      	blx	r3
 8006170:	60f8      	str	r0, [r7, #12]
      break;
 8006172:	e01c      	b.n	80061ae <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	7c12      	ldrb	r2, [r2, #16]
 8006180:	f107 010a 	add.w	r1, r7, #10
 8006184:	4610      	mov	r0, r2
 8006186:	4798      	blx	r3
 8006188:	60f8      	str	r0, [r7, #12]
      break;
 800618a:	e010      	b.n	80061ae <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7c12      	ldrb	r2, [r2, #16]
 8006198:	f107 010a 	add.w	r1, r7, #10
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
      break;
 80061a2:	e004      	b.n	80061ae <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f9ec 	bl	8006584 <USBD_CtlError>
      return;
 80061ac:	e044      	b.n	8006238 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 80061ae:	e02e      	b.n	800620e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	7c1b      	ldrb	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c0:	f107 020a 	add.w	r2, r7, #10
 80061c4:	4610      	mov	r0, r2
 80061c6:	4798      	blx	r3
 80061c8:	60f8      	str	r0, [r7, #12]
      break;
 80061ca:	e020      	b.n	800620e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9d8 	bl	8006584 <USBD_CtlError>
      return;
 80061d4:	e030      	b.n	8006238 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	7c1b      	ldrb	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10d      	bne.n	80061fa <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	f107 020a 	add.w	r2, r7, #10
 80061ea:	4610      	mov	r0, r2
 80061ec:	4798      	blx	r3
 80061ee:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	2207      	movs	r2, #7
 80061f6:	701a      	strb	r2, [r3, #0]
      break; 
 80061f8:	e009      	b.n	800620e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f9c1 	bl	8006584 <USBD_CtlError>
      return;
 8006202:	e019      	b.n	8006238 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f9bc 	bl	8006584 <USBD_CtlError>
    return;
 800620c:	e014      	b.n	8006238 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800620e:	897b      	ldrh	r3, [r7, #10]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d011      	beq.n	8006238 <USBD_GetDescriptor+0x1e0>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	88db      	ldrh	r3, [r3, #6]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00d      	beq.n	8006238 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	88da      	ldrh	r2, [r3, #6]
 8006220:	897b      	ldrh	r3, [r7, #10]
 8006222:	4293      	cmp	r3, r2
 8006224:	bf28      	it	cs
 8006226:	4613      	movcs	r3, r2
 8006228:	b29b      	uxth	r3, r3
 800622a:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 800622c:	897b      	ldrh	r3, [r7, #10]
 800622e:	461a      	mov	r2, r3
 8006230:	68f9      	ldr	r1, [r7, #12]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9b7 	bl	80065a6 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop

08006240 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	889b      	ldrh	r3, [r3, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d12c      	bne.n	80062ac <USBD_SetAddress+0x6c>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	88db      	ldrh	r3, [r3, #6]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d128      	bne.n	80062ac <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	885b      	ldrh	r3, [r3, #2]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006264:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800626c:	2b03      	cmp	r3, #3
 800626e:	d104      	bne.n	800627a <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f986 	bl	8006584 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006278:	e01c      	b.n	80062b4 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	7bfa      	ldrb	r2, [r7, #15]
 800627e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fa fd88 	bl	8000d9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f9ca 	bl	8006626 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80062a0:	e008      	b.n	80062b4 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80062aa:	e003      	b.n	80062b4 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f968 	bl	8006584 <USBD_CtlError>
  } 
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	885b      	ldrh	r3, [r3, #2]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	4b3e      	ldr	r3, [pc, #248]	; (80063c8 <USBD_SetConfig+0x10c>)
 80062ce:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80062d0:	4b3d      	ldr	r3, [pc, #244]	; (80063c8 <USBD_SetConfig+0x10c>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d904      	bls.n	80062e2 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f952 	bl	8006584 <USBD_CtlError>
 80062e0:	e06f      	b.n	80063c2 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d002      	beq.n	80062f2 <USBD_SetConfig+0x36>
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d023      	beq.n	8006338 <USBD_SetConfig+0x7c>
 80062f0:	e062      	b.n	80063b8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80062f2:	4b35      	ldr	r3, [pc, #212]	; (80063c8 <USBD_SetConfig+0x10c>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01a      	beq.n	8006330 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80062fa:	4b33      	ldr	r3, [pc, #204]	; (80063c8 <USBD_SetConfig+0x10c>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2203      	movs	r2, #3
 8006308:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800630c:	4b2e      	ldr	r3, [pc, #184]	; (80063c8 <USBD_SetConfig+0x10c>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff fb23 	bl	800595e <USBD_SetClassConfig>
 8006318:	4603      	mov	r3, r0
 800631a:	2b02      	cmp	r3, #2
 800631c:	d104      	bne.n	8006328 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f92f 	bl	8006584 <USBD_CtlError>
          return;
 8006326:	e04c      	b.n	80063c2 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f97c 	bl	8006626 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800632e:	e048      	b.n	80063c2 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f978 	bl	8006626 <USBD_CtlSendStatus>
      break;
 8006336:	e044      	b.n	80063c2 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8006338:	4b23      	ldr	r3, [pc, #140]	; (80063c8 <USBD_SetConfig+0x10c>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d112      	bne.n	8006366 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8006348:	4b1f      	ldr	r3, [pc, #124]	; (80063c8 <USBD_SetConfig+0x10c>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8006352:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <USBD_SetConfig+0x10c>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff fb1f 	bl	800599c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f961 	bl	8006626 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006364:	e02d      	b.n	80063c2 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8006366:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <USBD_SetConfig+0x10c>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d01d      	beq.n	80063b0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff fb0d 	bl	800599c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <USBD_SetConfig+0x10c>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800638c:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <USBD_SetConfig+0x10c>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fae3 	bl	800595e <USBD_SetClassConfig>
 8006398:	4603      	mov	r3, r0
 800639a:	2b02      	cmp	r3, #2
 800639c:	d104      	bne.n	80063a8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f8ef 	bl	8006584 <USBD_CtlError>
          return;
 80063a6:	e00c      	b.n	80063c2 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f93c 	bl	8006626 <USBD_CtlSendStatus>
      break;
 80063ae:	e008      	b.n	80063c2 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f938 	bl	8006626 <USBD_CtlSendStatus>
      break;
 80063b6:	e004      	b.n	80063c2 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f8e2 	bl	8006584 <USBD_CtlError>
      break;
 80063c0:	bf00      	nop
    }
  }
}
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	20000038 	.word	0x20000038

080063cc <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	88db      	ldrh	r3, [r3, #6]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d004      	beq.n	80063e8 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f8cf 	bl	8006584 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80063e6:	e01f      	b.n	8006428 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d002      	beq.n	80063f8 <USBD_GetConfig+0x2c>
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d00b      	beq.n	800640e <USBD_GetConfig+0x42>
 80063f6:	e012      	b.n	800641e <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8006402:	2201      	movs	r2, #1
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f8cd 	bl	80065a6 <USBD_CtlSendData>
      break;
 800640c:	e00c      	b.n	8006428 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8006412:	2201      	movs	r2, #1
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8c5 	bl	80065a6 <USBD_CtlSendData>
      break;
 800641c:	e004      	b.n	8006428 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f8af 	bl	8006584 <USBD_CtlError>
      break;
 8006426:	bf00      	nop
}
 8006428:	bf00      	nop
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006440:	3b02      	subs	r3, #2
 8006442:	2b01      	cmp	r3, #1
 8006444:	d815      	bhi.n	8006472 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f043 0202 	orr.w	r2, r3, #2
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8006466:	2202      	movs	r2, #2
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f89b 	bl	80065a6 <USBD_CtlSendData>
                      2);
    break;
 8006470:	e004      	b.n	800647c <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f885 	bl	8006584 <USBD_CtlError>
    break;
 800647a:	bf00      	nop
  }
}
 800647c:	bf00      	nop
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	885b      	ldrh	r3, [r3, #2]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10d      	bne.n	80064b2 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f8ba 	bl	8006626 <USBD_CtlSendStatus>
  }

}
 80064b2:	bf00      	nop
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80064ca:	3b02      	subs	r3, #2
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d812      	bhi.n	80064f6 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	885b      	ldrh	r3, [r3, #2]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d113      	bne.n	8006500 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f899 	bl	8006626 <USBD_CtlSendStatus>
    }
    break;
 80064f4:	e004      	b.n	8006500 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f843 	bl	8006584 <USBD_CtlError>
    break;
 80064fe:	e000      	b.n	8006502 <USBD_ClrFeature+0x48>
    break;
 8006500:	bf00      	nop
  }
}
 8006502:	bf00      	nop
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781a      	ldrb	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	785a      	ldrb	r2, [r3, #1]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	3302      	adds	r3, #2
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	b29a      	uxth	r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	3303      	adds	r3, #3
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	b29b      	uxth	r3, r3
 8006538:	4413      	add	r3, r2
 800653a:	b29a      	uxth	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	3304      	adds	r3, #4
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	b29a      	uxth	r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	3305      	adds	r3, #5
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	b29b      	uxth	r3, r3
 8006554:	4413      	add	r3, r2
 8006556:	b29a      	uxth	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	3306      	adds	r3, #6
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	b29a      	uxth	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	3307      	adds	r3, #7
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	b29b      	uxth	r3, r3
 8006570:	4413      	add	r3, r2
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	80da      	strh	r2, [r3, #6]

}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800658e:	2180      	movs	r1, #128	; 0x80
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fa fbb1 	bl	8000cf8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006596:	2100      	movs	r1, #0
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7fa fbad 	bl	8000cf8 <USBD_LL_StallEP>
}
 800659e:	bf00      	nop
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	4613      	mov	r3, r2
 80065b2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80065bc:	88fa      	ldrh	r2, [r7, #6]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 80065c2:	88fa      	ldrh	r2, [r7, #6]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	2100      	movs	r1, #0
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7fa fbf7 	bl	8000dc2 <USBD_LL_Transmit>
  
  return USBD_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	4613      	mov	r3, r2
 80065ea:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	2100      	movs	r1, #0
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7fa fbe5 	bl	8000dc2 <USBD_LL_Transmit>
  
  return USBD_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	4613      	mov	r3, r2
 800660e:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	2100      	movs	r1, #0
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f7fa fbea 	bl	8000df0 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b082      	sub	sp, #8
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2204      	movs	r2, #4
 8006632:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006636:	2300      	movs	r3, #0
 8006638:	2200      	movs	r2, #0
 800663a:	2100      	movs	r1, #0
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7fa fbc0 	bl	8000dc2 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2205      	movs	r2, #5
 8006658:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800665c:	2300      	movs	r3, #0
 800665e:	2200      	movs	r2, #0
 8006660:	2100      	movs	r1, #0
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fa fbc4 	bl	8000df0 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <__libc_init_array>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4e0d      	ldr	r6, [pc, #52]	; (80066ac <__libc_init_array+0x38>)
 8006678:	4c0d      	ldr	r4, [pc, #52]	; (80066b0 <__libc_init_array+0x3c>)
 800667a:	1ba4      	subs	r4, r4, r6
 800667c:	10a4      	asrs	r4, r4, #2
 800667e:	2500      	movs	r5, #0
 8006680:	42a5      	cmp	r5, r4
 8006682:	d109      	bne.n	8006698 <__libc_init_array+0x24>
 8006684:	4e0b      	ldr	r6, [pc, #44]	; (80066b4 <__libc_init_array+0x40>)
 8006686:	4c0c      	ldr	r4, [pc, #48]	; (80066b8 <__libc_init_array+0x44>)
 8006688:	f000 f818 	bl	80066bc <_init>
 800668c:	1ba4      	subs	r4, r4, r6
 800668e:	10a4      	asrs	r4, r4, #2
 8006690:	2500      	movs	r5, #0
 8006692:	42a5      	cmp	r5, r4
 8006694:	d105      	bne.n	80066a2 <__libc_init_array+0x2e>
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800669c:	4798      	blx	r3
 800669e:	3501      	adds	r5, #1
 80066a0:	e7ee      	b.n	8006680 <__libc_init_array+0xc>
 80066a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066a6:	4798      	blx	r3
 80066a8:	3501      	adds	r5, #1
 80066aa:	e7f2      	b.n	8006692 <__libc_init_array+0x1e>
 80066ac:	080066fc 	.word	0x080066fc
 80066b0:	080066fc 	.word	0x080066fc
 80066b4:	080066fc 	.word	0x080066fc
 80066b8:	08006700 	.word	0x08006700

080066bc <_init>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	bf00      	nop
 80066c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c2:	bc08      	pop	{r3}
 80066c4:	469e      	mov	lr, r3
 80066c6:	4770      	bx	lr

080066c8 <_fini>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	bf00      	nop
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr
